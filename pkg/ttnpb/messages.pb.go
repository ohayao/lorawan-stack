// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/messages.proto

package ttnpb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PayloadFormatter int32

const (
	// No payload formatter to work with raw payload only.
	PayloadFormatter_FORMATTER_NONE PayloadFormatter = 0
	// Use payload formatter for the end device type from a repository.
	PayloadFormatter_FORMATTER_REPOSITORY PayloadFormatter = 1
	// gRPC service payload formatter. The parameter is the host:port of the service.
	PayloadFormatter_FORMATTER_GRPC_SERVICE PayloadFormatter = 2
	// Custom payload formatter that executes Javascript code. The parameter is a JavaScript filename.
	PayloadFormatter_FORMATTER_JAVASCRIPT PayloadFormatter = 3
	// CayenneLPP payload formatter.
	PayloadFormatter_FORMATTER_CAYENNELPP PayloadFormatter = 4
)

var PayloadFormatter_name = map[int32]string{
	0: "FORMATTER_NONE",
	1: "FORMATTER_REPOSITORY",
	2: "FORMATTER_GRPC_SERVICE",
	3: "FORMATTER_JAVASCRIPT",
	4: "FORMATTER_CAYENNELPP",
}

var PayloadFormatter_value = map[string]int32{
	"FORMATTER_NONE":         0,
	"FORMATTER_REPOSITORY":   1,
	"FORMATTER_GRPC_SERVICE": 2,
	"FORMATTER_JAVASCRIPT":   3,
	"FORMATTER_CAYENNELPP":   4,
}

func (PayloadFormatter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{0}
}

type TxAcknowledgment_Result int32

const (
	TxAcknowledgment_SUCCESS          TxAcknowledgment_Result = 0
	TxAcknowledgment_UNKNOWN_ERROR    TxAcknowledgment_Result = 1
	TxAcknowledgment_TOO_LATE         TxAcknowledgment_Result = 2
	TxAcknowledgment_TOO_EARLY        TxAcknowledgment_Result = 3
	TxAcknowledgment_COLLISION_PACKET TxAcknowledgment_Result = 4
	TxAcknowledgment_COLLISION_BEACON TxAcknowledgment_Result = 5
	TxAcknowledgment_TX_FREQ          TxAcknowledgment_Result = 6
	TxAcknowledgment_TX_POWER         TxAcknowledgment_Result = 7
	TxAcknowledgment_GPS_UNLOCKED     TxAcknowledgment_Result = 8
)

var TxAcknowledgment_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "UNKNOWN_ERROR",
	2: "TOO_LATE",
	3: "TOO_EARLY",
	4: "COLLISION_PACKET",
	5: "COLLISION_BEACON",
	6: "TX_FREQ",
	7: "TX_POWER",
	8: "GPS_UNLOCKED",
}

var TxAcknowledgment_Result_value = map[string]int32{
	"SUCCESS":          0,
	"UNKNOWN_ERROR":    1,
	"TOO_LATE":         2,
	"TOO_EARLY":        3,
	"COLLISION_PACKET": 4,
	"COLLISION_BEACON": 5,
	"TX_FREQ":          6,
	"TX_POWER":         7,
	"GPS_UNLOCKED":     8,
}

func (TxAcknowledgment_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{2, 0}
}

// Uplink message from the end device to the network
type UplinkMessage struct {
	RawPayload []byte        `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	Payload    *Message      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Settings   TxSettings    `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings"`
	RxMetadata []*RxMetadata `protobuf:"bytes,5,rep,name=rx_metadata,json=rxMetadata,proto3" json:"rx_metadata,omitempty"`
	// Server time when a component received the message.
	// The Gateway Server and Network Server set this value to their local server time of reception.
	ReceivedAt     time.Time `protobuf:"bytes,6,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	CorrelationIds []string  `protobuf:"bytes,7,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	// Index of the device channel that received the message.
	// Set by Network Server.
	DeviceChannelIndex uint32 `protobuf:"varint,9,opt,name=device_channel_index,json=deviceChannelIndex,proto3" json:"device_channel_index,omitempty"`
	// Consumed airtime for the transmission of the uplink message. Calculated by Network Server using the RawPayload size and the transmission settings.
	ConsumedAirtime      *time.Duration `protobuf:"bytes,10,opt,name=consumed_airtime,json=consumedAirtime,proto3,stdduration" json:"consumed_airtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UplinkMessage) Reset()      { *m = UplinkMessage{} }
func (*UplinkMessage) ProtoMessage() {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{0}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkMessage.Unmarshal(m, b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
}
func (m *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(m, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return xxx_messageInfo_UplinkMessage.Size(m)
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *UplinkMessage) GetPayload() *Message {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UplinkMessage) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *UplinkMessage) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

func (m *UplinkMessage) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func (m *UplinkMessage) GetCorrelationIds() []string {
	if m != nil {
		return m.CorrelationIds
	}
	return nil
}

func (m *UplinkMessage) GetDeviceChannelIndex() uint32 {
	if m != nil {
		return m.DeviceChannelIndex
	}
	return 0
}

func (m *UplinkMessage) GetConsumedAirtime() *time.Duration {
	if m != nil {
		return m.ConsumedAirtime
	}
	return nil
}

// Downlink message from the network to the end device
type DownlinkMessage struct {
	RawPayload   []byte                `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	Payload      *Message              `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	EndDeviceIds *EndDeviceIdentifiers `protobuf:"bytes,3,opt,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	// Types that are valid to be assigned to Settings:
	//	*DownlinkMessage_Request
	//	*DownlinkMessage_Scheduled
	Settings             isDownlinkMessage_Settings `protobuf_oneof:"settings"`
	CorrelationIds       []string                   `protobuf:"bytes,6,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	SessionKeyId         []byte                     `protobuf:"bytes,7,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DownlinkMessage) Reset()      { *m = DownlinkMessage{} }
func (*DownlinkMessage) ProtoMessage() {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{1}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkMessage.Unmarshal(m, b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
}
func (m *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(m, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return xxx_messageInfo_DownlinkMessage.Size(m)
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

type isDownlinkMessage_Settings interface {
	isDownlinkMessage_Settings()
	Equal(interface{}) bool
}

type DownlinkMessage_Request struct {
	Request *TxRequest `protobuf:"bytes,4,opt,name=request,proto3,oneof" json:"request,omitempty"`
}
type DownlinkMessage_Scheduled struct {
	Scheduled *TxSettings `protobuf:"bytes,5,opt,name=scheduled,proto3,oneof" json:"scheduled,omitempty"`
}

func (*DownlinkMessage_Request) isDownlinkMessage_Settings()   {}
func (*DownlinkMessage_Scheduled) isDownlinkMessage_Settings() {}

func (m *DownlinkMessage) GetSettings() isDownlinkMessage_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *DownlinkMessage) GetRawPayload() []byte {
	if m != nil {
		return m.RawPayload
	}
	return nil
}

func (m *DownlinkMessage) GetPayload() *Message {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DownlinkMessage) GetEndDeviceIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIds
	}
	return nil
}

func (m *DownlinkMessage) GetRequest() *TxRequest {
	if x, ok := m.GetSettings().(*DownlinkMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *DownlinkMessage) GetScheduled() *TxSettings {
	if x, ok := m.GetSettings().(*DownlinkMessage_Scheduled); ok {
		return x.Scheduled
	}
	return nil
}

func (m *DownlinkMessage) GetCorrelationIds() []string {
	if m != nil {
		return m.CorrelationIds
	}
	return nil
}

func (m *DownlinkMessage) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownlinkMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownlinkMessage_Request)(nil),
		(*DownlinkMessage_Scheduled)(nil),
	}
}

type TxAcknowledgment struct {
	// Correlation IDs for the downlink message.
	// Set automatically by the UDP and LBS frontends.
	// For gRPC and the MQTT v3 frontends, the correlation IDs must match the ones of the downlink message the Tx acknowledgment message refers to.
	CorrelationIds []string                `protobuf:"bytes,1,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	Result         TxAcknowledgment_Result `protobuf:"varint,2,opt,name=result,proto3,enum=ttn.lorawan.v3.TxAcknowledgment_Result" json:"result,omitempty"`
	// The acknowledged downlink message. Set by the Gateway Server.
	DownlinkMessage      *DownlinkMessage `protobuf:"bytes,3,opt,name=downlink_message,json=downlinkMessage,proto3" json:"downlink_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TxAcknowledgment) Reset()      { *m = TxAcknowledgment{} }
func (*TxAcknowledgment) ProtoMessage() {}
func (*TxAcknowledgment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{2}
}
func (m *TxAcknowledgment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxAcknowledgment.Unmarshal(m, b)
}
func (m *TxAcknowledgment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxAcknowledgment.Marshal(b, m, deterministic)
}
func (m *TxAcknowledgment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxAcknowledgment.Merge(m, src)
}
func (m *TxAcknowledgment) XXX_Size() int {
	return xxx_messageInfo_TxAcknowledgment.Size(m)
}
func (m *TxAcknowledgment) XXX_DiscardUnknown() {
	xxx_messageInfo_TxAcknowledgment.DiscardUnknown(m)
}

var xxx_messageInfo_TxAcknowledgment proto.InternalMessageInfo

func (m *TxAcknowledgment) GetCorrelationIds() []string {
	if m != nil {
		return m.CorrelationIds
	}
	return nil
}

func (m *TxAcknowledgment) GetResult() TxAcknowledgment_Result {
	if m != nil {
		return m.Result
	}
	return TxAcknowledgment_SUCCESS
}

func (m *TxAcknowledgment) GetDownlinkMessage() *DownlinkMessage {
	if m != nil {
		return m.DownlinkMessage
	}
	return nil
}

type GatewayTxAcknowledgment struct {
	GatewayIds           *GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3" json:"gateway_ids,omitempty"`
	TxAck                *TxAcknowledgment   `protobuf:"bytes,2,opt,name=tx_ack,json=txAck,proto3" json:"tx_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GatewayTxAcknowledgment) Reset()      { *m = GatewayTxAcknowledgment{} }
func (*GatewayTxAcknowledgment) ProtoMessage() {}
func (*GatewayTxAcknowledgment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{3}
}
func (m *GatewayTxAcknowledgment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayTxAcknowledgment.Unmarshal(m, b)
}
func (m *GatewayTxAcknowledgment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayTxAcknowledgment.Marshal(b, m, deterministic)
}
func (m *GatewayTxAcknowledgment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayTxAcknowledgment.Merge(m, src)
}
func (m *GatewayTxAcknowledgment) XXX_Size() int {
	return xxx_messageInfo_GatewayTxAcknowledgment.Size(m)
}
func (m *GatewayTxAcknowledgment) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayTxAcknowledgment.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayTxAcknowledgment proto.InternalMessageInfo

func (m *GatewayTxAcknowledgment) GetGatewayIds() *GatewayIdentifiers {
	if m != nil {
		return m.GatewayIds
	}
	return nil
}

func (m *GatewayTxAcknowledgment) GetTxAck() *TxAcknowledgment {
	if m != nil {
		return m.TxAck
	}
	return nil
}

type GatewayUplinkMessage struct {
	*UplinkMessage `protobuf:"bytes,1,opt,name=message,proto3,embedded=message" json:"message,omitempty"`
	// LoRaWAN band ID of the gateway.
	BandId               string   `protobuf:"bytes,2,opt,name=band_id,json=bandId,proto3" json:"band_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayUplinkMessage) Reset()      { *m = GatewayUplinkMessage{} }
func (*GatewayUplinkMessage) ProtoMessage() {}
func (*GatewayUplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{4}
}
func (m *GatewayUplinkMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayUplinkMessage.Unmarshal(m, b)
}
func (m *GatewayUplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayUplinkMessage.Marshal(b, m, deterministic)
}
func (m *GatewayUplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayUplinkMessage.Merge(m, src)
}
func (m *GatewayUplinkMessage) XXX_Size() int {
	return xxx_messageInfo_GatewayUplinkMessage.Size(m)
}
func (m *GatewayUplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayUplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayUplinkMessage proto.InternalMessageInfo

func (m *GatewayUplinkMessage) GetBandId() string {
	if m != nil {
		return m.BandId
	}
	return ""
}

type ApplicationUplink struct {
	// Join Server issued identifier for the session keys used by this uplink.
	SessionKeyId []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	FPort        uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt         uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The frame payload of the uplink message.
	// The payload is still encrypted if the skip_payload_crypto field of the EndDevice
	// is true, which is indicated by the presence of the app_s_key field.
	FrmPayload []byte `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The decoded frame payload of the uplink message.
	// This field is set by the message processor that is configured for the end device (see formatters) or application (see default_formatters).
	DecodedPayload *types.Struct `protobuf:"bytes,5,opt,name=decoded_payload,json=decodedPayload,proto3" json:"decoded_payload,omitempty"`
	// Warnings generated by the message processor while decoding the frm_payload.
	DecodedPayloadWarnings []string `protobuf:"bytes,12,rep,name=decoded_payload_warnings,json=decodedPayloadWarnings,proto3" json:"decoded_payload_warnings,omitempty"`
	// A list of metadata for each antenna of each gateway that received this message.
	RxMetadata []*RxMetadata `protobuf:"bytes,6,rep,name=rx_metadata,json=rxMetadata,proto3" json:"rx_metadata,omitempty"`
	// Settings for the transmission.
	Settings TxSettings `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings"`
	// Server time when the Network Server received the message.
	ReceivedAt time.Time `protobuf:"bytes,8,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	// The AppSKey of the current session.
	// This field is only present if the skip_payload_crypto field of the EndDevice
	// is true.
	// Can be used to decrypt uplink payloads and encrypt downlink payloads.
	AppSKey *KeyEnvelope `protobuf:"bytes,9,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// The last AFCntDown of the current session.
	// This field is only present if the skip_payload_crypto field of the EndDevice
	// is true.
	// Can be used with app_s_key to encrypt downlink payloads.
	LastAFCntDown uint32 `protobuf:"varint,10,opt,name=last_a_f_cnt_down,json=lastAFCntDown,proto3" json:"last_a_f_cnt_down,omitempty"`
	Confirmed     bool   `protobuf:"varint,11,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Consumed airtime for the transmission of the uplink message. Calculated by Network Server using the RawPayload size and the transmission settings.
	ConsumedAirtime *time.Duration `protobuf:"bytes,13,opt,name=consumed_airtime,json=consumedAirtime,proto3,stdduration" json:"consumed_airtime,omitempty"`
	// End device location metadata, set by the Application Server while handling the message.
	Locations map[string]*Location `protobuf:"bytes,14,rep,name=locations,proto3" json:"locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// End device version identifiers, set by the Application Server while handling the message.
	VersionIds *EndDeviceVersionIdentifiers `protobuf:"bytes,15,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	// Network identifiers, set by the Network Server that handles the message.
	NetworkIds           *NetworkIdentifiers `protobuf:"bytes,16,opt,name=network_ids,json=networkIds,proto3" json:"network_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ApplicationUplink) Reset()      { *m = ApplicationUplink{} }
func (*ApplicationUplink) ProtoMessage() {}
func (*ApplicationUplink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{5}
}
func (m *ApplicationUplink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationUplink.Unmarshal(m, b)
}
func (m *ApplicationUplink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationUplink.Marshal(b, m, deterministic)
}
func (m *ApplicationUplink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUplink.Merge(m, src)
}
func (m *ApplicationUplink) XXX_Size() int {
	return xxx_messageInfo_ApplicationUplink.Size(m)
}
func (m *ApplicationUplink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUplink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUplink proto.InternalMessageInfo

func (m *ApplicationUplink) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *ApplicationUplink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationUplink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationUplink) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *ApplicationUplink) GetDecodedPayload() *types.Struct {
	if m != nil {
		return m.DecodedPayload
	}
	return nil
}

func (m *ApplicationUplink) GetDecodedPayloadWarnings() []string {
	if m != nil {
		return m.DecodedPayloadWarnings
	}
	return nil
}

func (m *ApplicationUplink) GetRxMetadata() []*RxMetadata {
	if m != nil {
		return m.RxMetadata
	}
	return nil
}

func (m *ApplicationUplink) GetSettings() TxSettings {
	if m != nil {
		return m.Settings
	}
	return TxSettings{}
}

func (m *ApplicationUplink) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

func (m *ApplicationUplink) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func (m *ApplicationUplink) GetLastAFCntDown() uint32 {
	if m != nil {
		return m.LastAFCntDown
	}
	return 0
}

func (m *ApplicationUplink) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *ApplicationUplink) GetConsumedAirtime() *time.Duration {
	if m != nil {
		return m.ConsumedAirtime
	}
	return nil
}

func (m *ApplicationUplink) GetLocations() map[string]*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *ApplicationUplink) GetVersionIds() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIds
	}
	return nil
}

func (m *ApplicationUplink) GetNetworkIds() *NetworkIdentifiers {
	if m != nil {
		return m.NetworkIds
	}
	return nil
}

type ApplicationLocation struct {
	Service              string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Location             `protobuf:"bytes,2,opt,name=location,proto3,embedded=location" json:"location"`
	Attributes           map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationLocation) Reset()      { *m = ApplicationLocation{} }
func (*ApplicationLocation) ProtoMessage() {}
func (*ApplicationLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{6}
}
func (m *ApplicationLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationLocation.Unmarshal(m, b)
}
func (m *ApplicationLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationLocation.Marshal(b, m, deterministic)
}
func (m *ApplicationLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLocation.Merge(m, src)
}
func (m *ApplicationLocation) XXX_Size() int {
	return xxx_messageInfo_ApplicationLocation.Size(m)
}
func (m *ApplicationLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLocation proto.InternalMessageInfo

func (m *ApplicationLocation) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ApplicationLocation) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ApplicationJoinAccept struct {
	// Join Server issued identifier for the session keys negotiated in this join.
	SessionKeyId []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// Encrypted Application Session Key (if Join Server sent it to Network Server).
	AppSKey *KeyEnvelope `protobuf:"bytes,2,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// Downlink messages in the queue that got invalidated because of the session change.
	InvalidatedDownlinks []*ApplicationDownlink `protobuf:"bytes,3,rep,name=invalidated_downlinks,json=invalidatedDownlinks,proto3" json:"invalidated_downlinks,omitempty"`
	// Indicates whether the security context refers to the pending session, i.e. when this join-accept is an answer to a
	// rejoin-request.
	PendingSession bool `protobuf:"varint,4,opt,name=pending_session,json=pendingSession,proto3" json:"pending_session,omitempty"`
	// Server time when the Network Server received the message.
	ReceivedAt           time.Time `protobuf:"bytes,8,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ApplicationJoinAccept) Reset()      { *m = ApplicationJoinAccept{} }
func (*ApplicationJoinAccept) ProtoMessage() {}
func (*ApplicationJoinAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{7}
}
func (m *ApplicationJoinAccept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationJoinAccept.Unmarshal(m, b)
}
func (m *ApplicationJoinAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationJoinAccept.Marshal(b, m, deterministic)
}
func (m *ApplicationJoinAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationJoinAccept.Merge(m, src)
}
func (m *ApplicationJoinAccept) XXX_Size() int {
	return xxx_messageInfo_ApplicationJoinAccept.Size(m)
}
func (m *ApplicationJoinAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationJoinAccept.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationJoinAccept proto.InternalMessageInfo

func (m *ApplicationJoinAccept) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *ApplicationJoinAccept) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func (m *ApplicationJoinAccept) GetInvalidatedDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.InvalidatedDownlinks
	}
	return nil
}

func (m *ApplicationJoinAccept) GetPendingSession() bool {
	if m != nil {
		return m.PendingSession
	}
	return false
}

func (m *ApplicationJoinAccept) GetReceivedAt() time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return time.Time{}
}

type ApplicationDownlink struct {
	// Join Server issued identifier for the session keys used by this downlink.
	SessionKeyId []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	FPort        uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FCnt         uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The frame payload of the downlink message.
	// The payload is encrypted if the skip_payload_crypto field of the EndDevice
	// is true.
	FrmPayload []byte `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The decoded frame payload of the downlink message.
	// When scheduling downlink with a message processor configured for the end device (see formatters) or application (see default_formatters),
	// this fields acts as input for the downlink encoder, and the output is set to frm_payload.
	// When reading downlink (listing the queue, downlink message events, etc), this fields acts as output of the downlink decoder, and the input is frm_payload.
	DecodedPayload *types.Struct `protobuf:"bytes,5,opt,name=decoded_payload,json=decodedPayload,proto3" json:"decoded_payload,omitempty"`
	// Warnings generated by the message processor while encoding frm_payload (scheduling downlink) or decoding the frm_payload (reading downlink).
	DecodedPayloadWarnings []string `protobuf:"bytes,10,rep,name=decoded_payload_warnings,json=decodedPayloadWarnings,proto3" json:"decoded_payload_warnings,omitempty"`
	Confirmed              bool     `protobuf:"varint,6,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional gateway and timing information for class B and C.
	// If set, this downlink message will only be transmitted as class B or C downlink.
	// If not set, this downlink message may be transmitted in class A, B and C.
	ClassBC *ApplicationDownlink_ClassBC `protobuf:"bytes,7,opt,name=class_b_c,json=classBC,proto3" json:"class_b_c,omitempty"`
	// Priority for scheduling the downlink message.
	Priority             TxSchedulePriority `protobuf:"varint,8,opt,name=priority,proto3,enum=ttn.lorawan.v3.TxSchedulePriority" json:"priority,omitempty"`
	CorrelationIds       []string           `protobuf:"bytes,9,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ApplicationDownlink) Reset()      { *m = ApplicationDownlink{} }
func (*ApplicationDownlink) ProtoMessage() {}
func (*ApplicationDownlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{8}
}
func (m *ApplicationDownlink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationDownlink.Unmarshal(m, b)
}
func (m *ApplicationDownlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationDownlink.Marshal(b, m, deterministic)
}
func (m *ApplicationDownlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlink.Merge(m, src)
}
func (m *ApplicationDownlink) XXX_Size() int {
	return xxx_messageInfo_ApplicationDownlink.Size(m)
}
func (m *ApplicationDownlink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlink proto.InternalMessageInfo

func (m *ApplicationDownlink) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *ApplicationDownlink) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *ApplicationDownlink) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ApplicationDownlink) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *ApplicationDownlink) GetDecodedPayload() *types.Struct {
	if m != nil {
		return m.DecodedPayload
	}
	return nil
}

func (m *ApplicationDownlink) GetDecodedPayloadWarnings() []string {
	if m != nil {
		return m.DecodedPayloadWarnings
	}
	return nil
}

func (m *ApplicationDownlink) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *ApplicationDownlink) GetClassBC() *ApplicationDownlink_ClassBC {
	if m != nil {
		return m.ClassBC
	}
	return nil
}

func (m *ApplicationDownlink) GetPriority() TxSchedulePriority {
	if m != nil {
		return m.Priority
	}
	return TxSchedulePriority_LOWEST
}

func (m *ApplicationDownlink) GetCorrelationIds() []string {
	if m != nil {
		return m.CorrelationIds
	}
	return nil
}

type ApplicationDownlink_ClassBC struct {
	// Possible gateway identifiers and antenna index to use for this downlink message.
	// The Network Server selects one of these gateways for downlink, based on connectivity, signal quality, channel utilization and an available slot.
	// If none of the gateways can be selected, the downlink message fails.
	// If empty, a gateway and antenna is selected automatically from the gateways seen in recent uplinks.
	Gateways []*GatewayAntennaIdentifiers `protobuf:"bytes,7,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Absolute time when the downlink message should be transmitted.
	// This requires the gateway to have GPS time synchronization.
	// If the time is in the past or if there is a scheduling conflict, the downlink message fails.
	// If null, the time is selected based on slot availability. This is recommended in class B mode.
	AbsoluteTime         *time.Time `protobuf:"bytes,8,opt,name=absolute_time,json=absoluteTime,proto3,stdtime" json:"absolute_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ApplicationDownlink_ClassBC) Reset()      { *m = ApplicationDownlink_ClassBC{} }
func (*ApplicationDownlink_ClassBC) ProtoMessage() {}
func (*ApplicationDownlink_ClassBC) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{8, 0}
}
func (m *ApplicationDownlink_ClassBC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationDownlink_ClassBC.Unmarshal(m, b)
}
func (m *ApplicationDownlink_ClassBC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationDownlink_ClassBC.Marshal(b, m, deterministic)
}
func (m *ApplicationDownlink_ClassBC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlink_ClassBC.Merge(m, src)
}
func (m *ApplicationDownlink_ClassBC) XXX_Size() int {
	return xxx_messageInfo_ApplicationDownlink_ClassBC.Size(m)
}
func (m *ApplicationDownlink_ClassBC) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlink_ClassBC.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlink_ClassBC proto.InternalMessageInfo

func (m *ApplicationDownlink_ClassBC) GetGateways() []*GatewayAntennaIdentifiers {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *ApplicationDownlink_ClassBC) GetAbsoluteTime() *time.Time {
	if m != nil {
		return m.AbsoluteTime
	}
	return nil
}

type ApplicationDownlinks struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplicationDownlinks) Reset()      { *m = ApplicationDownlinks{} }
func (*ApplicationDownlinks) ProtoMessage() {}
func (*ApplicationDownlinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{9}
}
func (m *ApplicationDownlinks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationDownlinks.Unmarshal(m, b)
}
func (m *ApplicationDownlinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationDownlinks.Marshal(b, m, deterministic)
}
func (m *ApplicationDownlinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlinks.Merge(m, src)
}
func (m *ApplicationDownlinks) XXX_Size() int {
	return xxx_messageInfo_ApplicationDownlinks.Size(m)
}
func (m *ApplicationDownlinks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlinks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlinks proto.InternalMessageInfo

func (m *ApplicationDownlinks) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

type ApplicationDownlinkFailed struct {
	ApplicationDownlink  `protobuf:"bytes,1,opt,name=downlink,proto3,embedded=downlink" json:"downlink"`
	Error                ErrorDetails `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ApplicationDownlinkFailed) Reset()      { *m = ApplicationDownlinkFailed{} }
func (*ApplicationDownlinkFailed) ProtoMessage() {}
func (*ApplicationDownlinkFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{10}
}
func (m *ApplicationDownlinkFailed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationDownlinkFailed.Unmarshal(m, b)
}
func (m *ApplicationDownlinkFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationDownlinkFailed.Marshal(b, m, deterministic)
}
func (m *ApplicationDownlinkFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDownlinkFailed.Merge(m, src)
}
func (m *ApplicationDownlinkFailed) XXX_Size() int {
	return xxx_messageInfo_ApplicationDownlinkFailed.Size(m)
}
func (m *ApplicationDownlinkFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDownlinkFailed.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDownlinkFailed proto.InternalMessageInfo

func (m *ApplicationDownlinkFailed) GetError() ErrorDetails {
	if m != nil {
		return m.Error
	}
	return ErrorDetails{}
}

type ApplicationInvalidatedDownlinks struct {
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,1,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	LastFCntDown         uint32                 `protobuf:"varint,2,opt,name=last_f_cnt_down,json=lastFCntDown,proto3" json:"last_f_cnt_down,omitempty"`
	SessionKeyId         []byte                 `protobuf:"bytes,3,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ApplicationInvalidatedDownlinks) Reset()      { *m = ApplicationInvalidatedDownlinks{} }
func (*ApplicationInvalidatedDownlinks) ProtoMessage() {}
func (*ApplicationInvalidatedDownlinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{11}
}
func (m *ApplicationInvalidatedDownlinks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationInvalidatedDownlinks.Unmarshal(m, b)
}
func (m *ApplicationInvalidatedDownlinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationInvalidatedDownlinks.Marshal(b, m, deterministic)
}
func (m *ApplicationInvalidatedDownlinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationInvalidatedDownlinks.Merge(m, src)
}
func (m *ApplicationInvalidatedDownlinks) XXX_Size() int {
	return xxx_messageInfo_ApplicationInvalidatedDownlinks.Size(m)
}
func (m *ApplicationInvalidatedDownlinks) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationInvalidatedDownlinks.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationInvalidatedDownlinks proto.InternalMessageInfo

func (m *ApplicationInvalidatedDownlinks) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func (m *ApplicationInvalidatedDownlinks) GetLastFCntDown() uint32 {
	if m != nil {
		return m.LastFCntDown
	}
	return 0
}

func (m *ApplicationInvalidatedDownlinks) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

type DownlinkQueueOperationErrorDetails struct {
	DevAddr              *go_thethings_network_lorawan_stack_v3_pkg_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.DevAddr" json:"dev_addr,omitempty"`
	SessionKeyId         []byte                                                   `protobuf:"bytes,2,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	MinFCntDown          uint32                                                   `protobuf:"varint,3,opt,name=min_f_cnt_down,json=minFCntDown,proto3" json:"min_f_cnt_down,omitempty"`
	PendingDevAddr       *go_thethings_network_lorawan_stack_v3_pkg_types.DevAddr `protobuf:"bytes,4,opt,name=pending_dev_addr,json=pendingDevAddr,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.DevAddr" json:"pending_dev_addr,omitempty"`
	PendingSessionKeyId  []byte                                                   `protobuf:"bytes,5,opt,name=pending_session_key_id,json=pendingSessionKeyId,proto3" json:"pending_session_key_id,omitempty"`
	PendingMinFCntDown   uint32                                                   `protobuf:"varint,6,opt,name=pending_min_f_cnt_down,json=pendingMinFCntDown,proto3" json:"pending_min_f_cnt_down,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *DownlinkQueueOperationErrorDetails) Reset()      { *m = DownlinkQueueOperationErrorDetails{} }
func (*DownlinkQueueOperationErrorDetails) ProtoMessage() {}
func (*DownlinkQueueOperationErrorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{12}
}
func (m *DownlinkQueueOperationErrorDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkQueueOperationErrorDetails.Unmarshal(m, b)
}
func (m *DownlinkQueueOperationErrorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkQueueOperationErrorDetails.Marshal(b, m, deterministic)
}
func (m *DownlinkQueueOperationErrorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkQueueOperationErrorDetails.Merge(m, src)
}
func (m *DownlinkQueueOperationErrorDetails) XXX_Size() int {
	return xxx_messageInfo_DownlinkQueueOperationErrorDetails.Size(m)
}
func (m *DownlinkQueueOperationErrorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkQueueOperationErrorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkQueueOperationErrorDetails proto.InternalMessageInfo

func (m *DownlinkQueueOperationErrorDetails) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *DownlinkQueueOperationErrorDetails) GetMinFCntDown() uint32 {
	if m != nil {
		return m.MinFCntDown
	}
	return 0
}

func (m *DownlinkQueueOperationErrorDetails) GetPendingSessionKeyId() []byte {
	if m != nil {
		return m.PendingSessionKeyId
	}
	return nil
}

func (m *DownlinkQueueOperationErrorDetails) GetPendingMinFCntDown() uint32 {
	if m != nil {
		return m.PendingMinFCntDown
	}
	return 0
}

type ApplicationServiceData struct {
	Service              string        `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Data                 *types.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ApplicationServiceData) Reset()      { *m = ApplicationServiceData{} }
func (*ApplicationServiceData) ProtoMessage() {}
func (*ApplicationServiceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{13}
}
func (m *ApplicationServiceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationServiceData.Unmarshal(m, b)
}
func (m *ApplicationServiceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationServiceData.Marshal(b, m, deterministic)
}
func (m *ApplicationServiceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationServiceData.Merge(m, src)
}
func (m *ApplicationServiceData) XXX_Size() int {
	return xxx_messageInfo_ApplicationServiceData.Size(m)
}
func (m *ApplicationServiceData) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationServiceData.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationServiceData proto.InternalMessageInfo

func (m *ApplicationServiceData) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ApplicationServiceData) GetData() *types.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

// Application uplink message.
type ApplicationUp struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3,embedded=end_device_ids" json:"end_device_ids"`
	CorrelationIds       []string `protobuf:"bytes,2,rep,name=correlation_ids,json=correlationIds,proto3" json:"correlation_ids,omitempty"`
	// Server time when the Application Server received the message.
	ReceivedAt *time.Time `protobuf:"bytes,12,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at,omitempty"`
	// Types that are valid to be assigned to Up:
	//	*ApplicationUp_UplinkMessage
	//	*ApplicationUp_JoinAccept
	//	*ApplicationUp_DownlinkAck
	//	*ApplicationUp_DownlinkNack
	//	*ApplicationUp_DownlinkSent
	//	*ApplicationUp_DownlinkFailed
	//	*ApplicationUp_DownlinkQueued
	//	*ApplicationUp_DownlinkQueueInvalidated
	//	*ApplicationUp_LocationSolved
	//	*ApplicationUp_ServiceData
	Up isApplicationUp_Up `protobuf_oneof:"up"`
	// Signals if the message is coming from the Network Server or is simulated.
	Simulated            bool     `protobuf:"varint,14,opt,name=simulated,proto3" json:"simulated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationUp) Reset()      { *m = ApplicationUp{} }
func (*ApplicationUp) ProtoMessage() {}
func (*ApplicationUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{14}
}
func (m *ApplicationUp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationUp.Unmarshal(m, b)
}
func (m *ApplicationUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationUp.Marshal(b, m, deterministic)
}
func (m *ApplicationUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationUp.Merge(m, src)
}
func (m *ApplicationUp) XXX_Size() int {
	return xxx_messageInfo_ApplicationUp.Size(m)
}
func (m *ApplicationUp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationUp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationUp proto.InternalMessageInfo

type isApplicationUp_Up interface {
	isApplicationUp_Up()
	Equal(interface{}) bool
}

type ApplicationUp_UplinkMessage struct {
	UplinkMessage *ApplicationUplink `protobuf:"bytes,3,opt,name=uplink_message,json=uplinkMessage,proto3,oneof" json:"uplink_message,omitempty"`
}
type ApplicationUp_JoinAccept struct {
	JoinAccept *ApplicationJoinAccept `protobuf:"bytes,4,opt,name=join_accept,json=joinAccept,proto3,oneof" json:"join_accept,omitempty"`
}
type ApplicationUp_DownlinkAck struct {
	DownlinkAck *ApplicationDownlink `protobuf:"bytes,5,opt,name=downlink_ack,json=downlinkAck,proto3,oneof" json:"downlink_ack,omitempty"`
}
type ApplicationUp_DownlinkNack struct {
	DownlinkNack *ApplicationDownlink `protobuf:"bytes,6,opt,name=downlink_nack,json=downlinkNack,proto3,oneof" json:"downlink_nack,omitempty"`
}
type ApplicationUp_DownlinkSent struct {
	DownlinkSent *ApplicationDownlink `protobuf:"bytes,7,opt,name=downlink_sent,json=downlinkSent,proto3,oneof" json:"downlink_sent,omitempty"`
}
type ApplicationUp_DownlinkFailed struct {
	DownlinkFailed *ApplicationDownlinkFailed `protobuf:"bytes,8,opt,name=downlink_failed,json=downlinkFailed,proto3,oneof" json:"downlink_failed,omitempty"`
}
type ApplicationUp_DownlinkQueued struct {
	DownlinkQueued *ApplicationDownlink `protobuf:"bytes,9,opt,name=downlink_queued,json=downlinkQueued,proto3,oneof" json:"downlink_queued,omitempty"`
}
type ApplicationUp_DownlinkQueueInvalidated struct {
	DownlinkQueueInvalidated *ApplicationInvalidatedDownlinks `protobuf:"bytes,10,opt,name=downlink_queue_invalidated,json=downlinkQueueInvalidated,proto3,oneof" json:"downlink_queue_invalidated,omitempty"`
}
type ApplicationUp_LocationSolved struct {
	LocationSolved *ApplicationLocation `protobuf:"bytes,11,opt,name=location_solved,json=locationSolved,proto3,oneof" json:"location_solved,omitempty"`
}
type ApplicationUp_ServiceData struct {
	ServiceData *ApplicationServiceData `protobuf:"bytes,13,opt,name=service_data,json=serviceData,proto3,oneof" json:"service_data,omitempty"`
}

func (*ApplicationUp_UplinkMessage) isApplicationUp_Up()            {}
func (*ApplicationUp_JoinAccept) isApplicationUp_Up()               {}
func (*ApplicationUp_DownlinkAck) isApplicationUp_Up()              {}
func (*ApplicationUp_DownlinkNack) isApplicationUp_Up()             {}
func (*ApplicationUp_DownlinkSent) isApplicationUp_Up()             {}
func (*ApplicationUp_DownlinkFailed) isApplicationUp_Up()           {}
func (*ApplicationUp_DownlinkQueued) isApplicationUp_Up()           {}
func (*ApplicationUp_DownlinkQueueInvalidated) isApplicationUp_Up() {}
func (*ApplicationUp_LocationSolved) isApplicationUp_Up()           {}
func (*ApplicationUp_ServiceData) isApplicationUp_Up()              {}

func (m *ApplicationUp) GetUp() isApplicationUp_Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *ApplicationUp) GetCorrelationIds() []string {
	if m != nil {
		return m.CorrelationIds
	}
	return nil
}

func (m *ApplicationUp) GetReceivedAt() *time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *ApplicationUp) GetUplinkMessage() *ApplicationUplink {
	if x, ok := m.GetUp().(*ApplicationUp_UplinkMessage); ok {
		return x.UplinkMessage
	}
	return nil
}

func (m *ApplicationUp) GetJoinAccept() *ApplicationJoinAccept {
	if x, ok := m.GetUp().(*ApplicationUp_JoinAccept); ok {
		return x.JoinAccept
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkAck() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkAck); ok {
		return x.DownlinkAck
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkNack() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkNack); ok {
		return x.DownlinkNack
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkSent() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkSent); ok {
		return x.DownlinkSent
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkFailed() *ApplicationDownlinkFailed {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkFailed); ok {
		return x.DownlinkFailed
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkQueued() *ApplicationDownlink {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkQueued); ok {
		return x.DownlinkQueued
	}
	return nil
}

func (m *ApplicationUp) GetDownlinkQueueInvalidated() *ApplicationInvalidatedDownlinks {
	if x, ok := m.GetUp().(*ApplicationUp_DownlinkQueueInvalidated); ok {
		return x.DownlinkQueueInvalidated
	}
	return nil
}

func (m *ApplicationUp) GetLocationSolved() *ApplicationLocation {
	if x, ok := m.GetUp().(*ApplicationUp_LocationSolved); ok {
		return x.LocationSolved
	}
	return nil
}

func (m *ApplicationUp) GetServiceData() *ApplicationServiceData {
	if x, ok := m.GetUp().(*ApplicationUp_ServiceData); ok {
		return x.ServiceData
	}
	return nil
}

func (m *ApplicationUp) GetSimulated() bool {
	if m != nil {
		return m.Simulated
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplicationUp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplicationUp_UplinkMessage)(nil),
		(*ApplicationUp_JoinAccept)(nil),
		(*ApplicationUp_DownlinkAck)(nil),
		(*ApplicationUp_DownlinkNack)(nil),
		(*ApplicationUp_DownlinkSent)(nil),
		(*ApplicationUp_DownlinkFailed)(nil),
		(*ApplicationUp_DownlinkQueued)(nil),
		(*ApplicationUp_DownlinkQueueInvalidated)(nil),
		(*ApplicationUp_LocationSolved)(nil),
		(*ApplicationUp_ServiceData)(nil),
	}
}

type MessagePayloadFormatters struct {
	// Payload formatter for uplink messages, must be set together with its parameter.
	UpFormatter PayloadFormatter `protobuf:"varint,1,opt,name=up_formatter,json=upFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"up_formatter,omitempty"`
	// Parameter for the up_formatter, must be set together. The API enforces a maximum length of 16KB, but the size may be restricted further by deployment configuration.
	UpFormatterParameter string `protobuf:"bytes,2,opt,name=up_formatter_parameter,json=upFormatterParameter,proto3" json:"up_formatter_parameter,omitempty"`
	// Payload formatter for downlink messages, must be set together with its parameter.
	DownFormatter PayloadFormatter `protobuf:"varint,3,opt,name=down_formatter,json=downFormatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"down_formatter,omitempty"`
	// Parameter for the down_formatter, must be set together. The API enforces a maximum length of 16KB, but the size may be restricted further by deployment configuration.
	DownFormatterParameter string   `protobuf:"bytes,4,opt,name=down_formatter_parameter,json=downFormatterParameter,proto3" json:"down_formatter_parameter,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MessagePayloadFormatters) Reset()      { *m = MessagePayloadFormatters{} }
func (*MessagePayloadFormatters) ProtoMessage() {}
func (*MessagePayloadFormatters) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{15}
}
func (m *MessagePayloadFormatters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessagePayloadFormatters.Unmarshal(m, b)
}
func (m *MessagePayloadFormatters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessagePayloadFormatters.Marshal(b, m, deterministic)
}
func (m *MessagePayloadFormatters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadFormatters.Merge(m, src)
}
func (m *MessagePayloadFormatters) XXX_Size() int {
	return xxx_messageInfo_MessagePayloadFormatters.Size(m)
}
func (m *MessagePayloadFormatters) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadFormatters.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadFormatters proto.InternalMessageInfo

func (m *MessagePayloadFormatters) GetUpFormatter() PayloadFormatter {
	if m != nil {
		return m.UpFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadFormatters) GetUpFormatterParameter() string {
	if m != nil {
		return m.UpFormatterParameter
	}
	return ""
}

func (m *MessagePayloadFormatters) GetDownFormatter() PayloadFormatter {
	if m != nil {
		return m.DownFormatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadFormatters) GetDownFormatterParameter() string {
	if m != nil {
		return m.DownFormatterParameter
	}
	return ""
}

type DownlinkQueueRequest struct {
	EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=end_device_ids,json=endDeviceIds,proto3,embedded=end_device_ids" json:"end_device_ids"`
	Downlinks            []*ApplicationDownlink `protobuf:"bytes,2,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DownlinkQueueRequest) Reset()      { *m = DownlinkQueueRequest{} }
func (*DownlinkQueueRequest) ProtoMessage() {}
func (*DownlinkQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbc6bff5780bdc9d, []int{16}
}
func (m *DownlinkQueueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkQueueRequest.Unmarshal(m, b)
}
func (m *DownlinkQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkQueueRequest.Marshal(b, m, deterministic)
}
func (m *DownlinkQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkQueueRequest.Merge(m, src)
}
func (m *DownlinkQueueRequest) XXX_Size() int {
	return xxx_messageInfo_DownlinkQueueRequest.Size(m)
}
func (m *DownlinkQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkQueueRequest proto.InternalMessageInfo

func (m *DownlinkQueueRequest) GetDownlinks() []*ApplicationDownlink {
	if m != nil {
		return m.Downlinks
	}
	return nil
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.PayloadFormatter", PayloadFormatter_name, PayloadFormatter_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.PayloadFormatter", PayloadFormatter_name, PayloadFormatter_value)
	proto.RegisterEnum("ttn.lorawan.v3.TxAcknowledgment_Result", TxAcknowledgment_Result_name, TxAcknowledgment_Result_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.TxAcknowledgment_Result", TxAcknowledgment_Result_name, TxAcknowledgment_Result_value)
	proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	golang_proto.RegisterType((*UplinkMessage)(nil), "ttn.lorawan.v3.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	golang_proto.RegisterType((*DownlinkMessage)(nil), "ttn.lorawan.v3.DownlinkMessage")
	proto.RegisterType((*TxAcknowledgment)(nil), "ttn.lorawan.v3.TxAcknowledgment")
	golang_proto.RegisterType((*TxAcknowledgment)(nil), "ttn.lorawan.v3.TxAcknowledgment")
	proto.RegisterType((*GatewayTxAcknowledgment)(nil), "ttn.lorawan.v3.GatewayTxAcknowledgment")
	golang_proto.RegisterType((*GatewayTxAcknowledgment)(nil), "ttn.lorawan.v3.GatewayTxAcknowledgment")
	proto.RegisterType((*GatewayUplinkMessage)(nil), "ttn.lorawan.v3.GatewayUplinkMessage")
	golang_proto.RegisterType((*GatewayUplinkMessage)(nil), "ttn.lorawan.v3.GatewayUplinkMessage")
	proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	golang_proto.RegisterType((*ApplicationUplink)(nil), "ttn.lorawan.v3.ApplicationUplink")
	proto.RegisterMapType((map[string]*Location)(nil), "ttn.lorawan.v3.ApplicationUplink.LocationsEntry")
	golang_proto.RegisterMapType((map[string]*Location)(nil), "ttn.lorawan.v3.ApplicationUplink.LocationsEntry")
	proto.RegisterType((*ApplicationLocation)(nil), "ttn.lorawan.v3.ApplicationLocation")
	golang_proto.RegisterType((*ApplicationLocation)(nil), "ttn.lorawan.v3.ApplicationLocation")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationLocation.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationLocation.AttributesEntry")
	proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	golang_proto.RegisterType((*ApplicationJoinAccept)(nil), "ttn.lorawan.v3.ApplicationJoinAccept")
	proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
	golang_proto.RegisterType((*ApplicationDownlink)(nil), "ttn.lorawan.v3.ApplicationDownlink")
	proto.RegisterType((*ApplicationDownlink_ClassBC)(nil), "ttn.lorawan.v3.ApplicationDownlink.ClassBC")
	golang_proto.RegisterType((*ApplicationDownlink_ClassBC)(nil), "ttn.lorawan.v3.ApplicationDownlink.ClassBC")
	proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	golang_proto.RegisterType((*ApplicationDownlinks)(nil), "ttn.lorawan.v3.ApplicationDownlinks")
	proto.RegisterType((*ApplicationDownlinkFailed)(nil), "ttn.lorawan.v3.ApplicationDownlinkFailed")
	golang_proto.RegisterType((*ApplicationDownlinkFailed)(nil), "ttn.lorawan.v3.ApplicationDownlinkFailed")
	proto.RegisterType((*ApplicationInvalidatedDownlinks)(nil), "ttn.lorawan.v3.ApplicationInvalidatedDownlinks")
	golang_proto.RegisterType((*ApplicationInvalidatedDownlinks)(nil), "ttn.lorawan.v3.ApplicationInvalidatedDownlinks")
	proto.RegisterType((*DownlinkQueueOperationErrorDetails)(nil), "ttn.lorawan.v3.DownlinkQueueOperationErrorDetails")
	golang_proto.RegisterType((*DownlinkQueueOperationErrorDetails)(nil), "ttn.lorawan.v3.DownlinkQueueOperationErrorDetails")
	proto.RegisterType((*ApplicationServiceData)(nil), "ttn.lorawan.v3.ApplicationServiceData")
	golang_proto.RegisterType((*ApplicationServiceData)(nil), "ttn.lorawan.v3.ApplicationServiceData")
	proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	golang_proto.RegisterType((*ApplicationUp)(nil), "ttn.lorawan.v3.ApplicationUp")
	proto.RegisterType((*MessagePayloadFormatters)(nil), "ttn.lorawan.v3.MessagePayloadFormatters")
	golang_proto.RegisterType((*MessagePayloadFormatters)(nil), "ttn.lorawan.v3.MessagePayloadFormatters")
	proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
	golang_proto.RegisterType((*DownlinkQueueRequest)(nil), "ttn.lorawan.v3.DownlinkQueueRequest")
}

func init() { proto.RegisterFile("lorawan-stack/api/messages.proto", fileDescriptor_bbc6bff5780bdc9d) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/messages.proto", fileDescriptor_bbc6bff5780bdc9d)
}

var fileDescriptor_bbc6bff5780bdc9d = []byte{
	// 2460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x6c, 0xe3, 0xc6,
	0x15, 0x16, 0xf5, 0xaf, 0xa7, 0x1f, 0x33, 0x13, 0xc7, 0x61, 0xdc, 0x8d, 0xed, 0x2a, 0x9b, 0xc6,
	0xd9, 0xd4, 0x72, 0xea, 0x45, 0x90, 0x74, 0x83, 0x20, 0x91, 0x64, 0x79, 0x2d, 0xff, 0x48, 0xda,
	0x91, 0x76, 0x93, 0x6d, 0x9a, 0x12, 0xb4, 0x38, 0xd6, 0x32, 0x96, 0x48, 0x86, 0xa4, 0x64, 0x2b,
	0x45, 0x81, 0xb4, 0xc7, 0x00, 0x05, 0x16, 0xb9, 0xa4, 0x28, 0x8a, 0x36, 0xc7, 0x02, 0xbd, 0x17,
	0x05, 0x7a, 0x49, 0x73, 0x4a, 0x6f, 0x39, 0x16, 0x3d, 0x6c, 0xdb, 0xcd, 0xa5, 0xc7, 0x5e, 0x5a,
	0x14, 0xbe, 0x6c, 0xc1, 0xe1, 0x50, 0x22, 0x29, 0xad, 0x2d, 0xef, 0xb6, 0x40, 0x6f, 0xe4, 0xcc,
	0x7b, 0xdf, 0xbc, 0x79, 0xef, 0xcd, 0xf7, 0xde, 0x0c, 0xac, 0x74, 0x35, 0x43, 0x3a, 0x96, 0xd4,
	0x35, 0xd3, 0x92, 0xda, 0x47, 0xeb, 0x92, 0xae, 0xac, 0xf7, 0x88, 0x69, 0x4a, 0x1d, 0x62, 0x16,
	0x74, 0x43, 0xb3, 0x34, 0x94, 0xb3, 0x2c, 0xb5, 0xc0, 0xa4, 0x0a, 0x83, 0xab, 0x8b, 0xc5, 0x8e,
	0x62, 0xdd, 0xe9, 0x1f, 0x14, 0xda, 0x5a, 0x6f, 0x9d, 0xa8, 0x03, 0x6d, 0xa8, 0x1b, 0xda, 0xc9,
	0x70, 0x9d, 0x0a, 0xb7, 0xd7, 0x3a, 0x44, 0x5d, 0x1b, 0x48, 0x5d, 0x45, 0x96, 0x2c, 0xb2, 0x3e,
	0xf1, 0xe1, 0x40, 0x2e, 0xae, 0x79, 0x20, 0x3a, 0x5a, 0x47, 0x73, 0x94, 0x0f, 0xfa, 0x87, 0xf4,
	0x8f, 0xfe, 0xd0, 0x2f, 0x26, 0x7e, 0xa9, 0xa3, 0x69, 0x9d, 0x2e, 0x19, 0x4b, 0x99, 0x96, 0xd1,
	0x6f, 0x5b, 0x6c, 0x76, 0x39, 0x38, 0x6b, 0x29, 0x3d, 0x62, 0x5a, 0x52, 0x4f, 0x67, 0x02, 0x4b,
	0x41, 0x01, 0xb9, 0x6f, 0x48, 0x96, 0xa2, 0xa9, 0x6c, 0xfe, 0xd9, 0x49, 0x17, 0x10, 0xc3, 0xd0,
	0x0c, 0x36, 0xfd, 0xdc, 0xe4, 0xb4, 0x22, 0x13, 0xd5, 0x52, 0x0e, 0x15, 0x62, 0x98, 0xae, 0x89,
	0x93, 0x42, 0x47, 0x64, 0xe8, 0xce, 0x2e, 0x4f, 0xce, 0xba, 0x0e, 0x75, 0x04, 0xa6, 0x46, 0xc1,
	0x92, 0x64, 0xc9, 0x92, 0x1c, 0x89, 0xfc, 0xbf, 0x22, 0x90, 0xbd, 0xa9, 0x77, 0x15, 0xf5, 0x68,
	0xdf, 0x09, 0x0f, 0x5a, 0x86, 0xb4, 0x21, 0x1d, 0x8b, 0xba, 0x34, 0xec, 0x6a, 0x92, 0x2c, 0x70,
	0x2b, 0xdc, 0x6a, 0x06, 0x83, 0x21, 0x1d, 0x37, 0x9c, 0x11, 0xf4, 0x1d, 0x48, 0xb8, 0x93, 0xe1,
	0x15, 0x6e, 0x35, 0xbd, 0xf1, 0x74, 0xc1, 0x1f, 0xca, 0x02, 0x83, 0xc2, 0xae, 0x1c, 0xda, 0x84,
	0xa4, 0x49, 0x2c, 0x4b, 0x51, 0x3b, 0xa6, 0x10, 0xa5, 0x3a, 0x8b, 0x41, 0x9d, 0xd6, 0x49, 0x93,
	0x49, 0x94, 0x32, 0xa7, 0xa5, 0xd8, 0xc7, 0x5c, 0x98, 0xe7, 0xbe, 0xbc, 0xb7, 0x1c, 0xc2, 0x23,
	0x4d, 0xf4, 0x3a, 0xa4, 0x8d, 0x13, 0xd1, 0xdd, 0x80, 0x10, 0x5b, 0x89, 0x4c, 0x03, 0xc2, 0x27,
	0xfb, 0x4c, 0x02, 0x83, 0x31, 0xfa, 0x46, 0x15, 0x48, 0x1b, 0xa4, 0x4d, 0x94, 0x01, 0x91, 0x45,
	0xc9, 0x12, 0xe2, 0xcc, 0x0a, 0x27, 0x86, 0x05, 0x37, 0x86, 0x85, 0x96, 0x1b, 0xe4, 0x52, 0xd2,
	0x5e, 0xfd, 0xee, 0x5f, 0x96, 0x39, 0x0c, 0xae, 0x62, 0xd1, 0x42, 0xaf, 0xc0, 0x5c, 0x5b, 0x33,
	0x0c, 0xd2, 0xa5, 0x91, 0x16, 0x15, 0xd9, 0x14, 0x12, 0x2b, 0x91, 0xd5, 0x94, 0x6d, 0x74, 0xea,
	0x13, 0x2e, 0x9e, 0x8f, 0x1a, 0x61, 0x41, 0xc6, 0x39, 0x8f, 0x50, 0x55, 0x36, 0xd1, 0x35, 0x98,
	0x97, 0xc9, 0x40, 0x69, 0x13, 0xb1, 0x7d, 0x47, 0x52, 0x55, 0xd2, 0x15, 0x15, 0x55, 0x26, 0x27,
	0x42, 0x6a, 0x85, 0x5b, 0xcd, 0x96, 0x92, 0xa7, 0xa5, 0xd8, 0x95, 0x88, 0xf0, 0x80, 0xc3, 0xc8,
	0x91, 0x2a, 0x3b, 0x42, 0x55, 0x5b, 0x06, 0xd5, 0x80, 0x6f, 0x6b, 0xaa, 0xd9, 0xef, 0xd9, 0x96,
	0x2b, 0x86, 0x9d, 0x86, 0x02, 0x50, 0xf3, 0x9f, 0x99, 0x30, 0x7f, 0x93, 0xa5, 0x20, 0xb5, 0x9e,
	0xfb, 0x99, 0x6d, 0xfd, 0x9c, 0xab, 0x5c, 0x74, 0x74, 0x77, 0xa2, 0xc9, 0x24, 0x9f, 0xca, 0xff,
	0x22, 0x02, 0x73, 0x9b, 0xda, 0xb1, 0xfa, 0xbf, 0x0e, 0xfd, 0x0e, 0xe4, 0x88, 0x2a, 0x8b, 0x6c,
	0xf7, 0xb6, 0xbf, 0x22, 0x54, 0xf3, 0x72, 0x50, 0xb3, 0xa2, 0xca, 0x9b, 0x54, 0xa8, 0x3a, 0x3e,
	0x05, 0x38, 0x43, 0xc6, 0xa3, 0x26, 0x7a, 0x05, 0x12, 0x06, 0xf9, 0xa0, 0x4f, 0x4c, 0x8b, 0x65,
	0xd1, 0x33, 0x93, 0x59, 0x84, 0x1d, 0x81, 0xed, 0x10, 0x76, 0x65, 0xd1, 0x35, 0x48, 0x99, 0xed,
	0x3b, 0x44, 0xee, 0x77, 0x89, 0x2c, 0xc4, 0xce, 0x4b, 0xbf, 0xed, 0x10, 0x1e, 0x8b, 0x4f, 0x8b,
	0x77, 0x7c, 0x86, 0x78, 0x17, 0x20, 0x67, 0x12, 0xd3, 0xb4, 0x55, 0x8e, 0xc8, 0x50, 0x54, 0x64,
	0x21, 0x61, 0x3b, 0x93, 0x46, 0xfa, 0xc3, 0x88, 0xf0, 0x11, 0x8f, 0x33, 0x6c, 0x7e, 0x97, 0x0c,
	0xab, 0x72, 0x69, 0x6e, 0x7c, 0x40, 0x50, 0xe4, 0xdf, 0x25, 0x2e, 0xff, 0xe3, 0x08, 0xf0, 0xad,
	0x93, 0x62, 0xfb, 0x48, 0xd5, 0x8e, 0xbb, 0x44, 0xee, 0xf4, 0x88, 0x3a, 0x35, 0xf9, 0xb8, 0x19,
	0x8c, 0xa9, 0x42, 0xdc, 0x20, 0x66, 0xbf, 0x6b, 0xd1, 0xa0, 0xe5, 0x36, 0x5e, 0x98, 0xdc, 0xbc,
	0x7f, 0xa1, 0x02, 0xa6, 0xe2, 0xd4, 0xda, 0x9f, 0xd8, 0x07, 0x11, 0x33, 0x00, 0xb4, 0x03, 0xbc,
	0xcc, 0x92, 0x46, 0x64, 0x7c, 0xce, 0xe2, 0xb9, 0x1c, 0x04, 0x0d, 0x24, 0x17, 0x9e, 0x93, 0xfd,
	0x03, 0xf9, 0x5f, 0x72, 0x10, 0x77, 0x16, 0x42, 0x69, 0x48, 0x34, 0x6f, 0x96, 0xcb, 0x95, 0x66,
	0x93, 0x0f, 0xa1, 0x27, 0x20, 0x7b, 0xb3, 0xb6, 0x5b, 0xab, 0xbf, 0x5d, 0x13, 0x2b, 0x18, 0xd7,
	0x31, 0xcf, 0xa1, 0x0c, 0x24, 0x5b, 0xf5, 0xba, 0xb8, 0x57, 0x6c, 0x55, 0xf8, 0x30, 0xca, 0x42,
	0xca, 0xfe, 0xab, 0x14, 0xf1, 0xde, 0x6d, 0x3e, 0x82, 0xe6, 0x81, 0x2f, 0xd7, 0xf7, 0xf6, 0xaa,
	0xcd, 0x6a, 0xbd, 0x26, 0x36, 0x8a, 0xe5, 0xdd, 0x4a, 0x8b, 0x8f, 0xfa, 0x47, 0x4b, 0x95, 0x62,
	0xb9, 0x5e, 0xe3, 0x63, 0xf6, 0x42, 0xad, 0x77, 0xc4, 0x2d, 0x5c, 0xb9, 0xc1, 0xc7, 0x29, 0xea,
	0x3b, 0x62, 0xa3, 0xfe, 0x76, 0x05, 0xf3, 0x09, 0xc4, 0x43, 0xe6, 0x7a, 0xa3, 0x29, 0xde, 0xac,
	0xed, 0xd5, 0xcb, 0xbb, 0x95, 0x4d, 0x3e, 0x99, 0xff, 0x94, 0x83, 0xa7, 0xaf, 0x4b, 0x16, 0x39,
	0x96, 0x86, 0x13, 0xa1, 0x28, 0x43, 0xba, 0xe3, 0x4c, 0xb1, 0x30, 0xd8, 0x3e, 0xc8, 0x07, 0x7d,
	0xc0, 0xb4, 0xbd, 0x19, 0x0d, 0x1d, 0x77, 0xcc, 0x44, 0xaf, 0x42, 0xdc, 0x3a, 0x11, 0xa5, 0xf6,
	0x11, 0x3b, 0x4d, 0x2b, 0xe7, 0x05, 0x06, 0xc7, 0x2c, 0x7b, 0x24, 0x3f, 0x80, 0x79, 0x06, 0xed,
	0xe7, 0xee, 0x0a, 0x24, 0xdc, 0xa8, 0x38, 0x16, 0x3d, 0x1b, 0x44, 0xf4, 0xc9, 0x8f, 0x99, 0xf6,
	0xab, 0x7b, 0xcb, 0x1c, 0x76, 0x75, 0xd1, 0xd3, 0x90, 0x38, 0x90, 0x54, 0xd9, 0x4e, 0x5b, 0xdb,
	0xb0, 0x14, 0x8e, 0xdb, 0xbf, 0x55, 0x39, 0xff, 0xcf, 0x04, 0x3c, 0x51, 0xd4, 0xf5, 0xae, 0xd2,
	0xa6, 0xc9, 0xe5, 0x80, 0x4d, 0x49, 0x76, 0xee, 0xac, 0x64, 0x47, 0x79, 0x88, 0x1f, 0x8a, 0xba,
	0x66, 0x38, 0xf9, 0x98, 0x2d, 0xa5, 0x4f, 0x4b, 0xc9, 0x2b, 0x71, 0xe1, 0x01, 0xf7, 0xda, 0x5f,
	0x39, 0x1c, 0x3b, 0x6c, 0x68, 0x86, 0x85, 0x9e, 0x84, 0xd8, 0xa1, 0xd8, 0x56, 0x2d, 0x9a, 0x5d,
	0x59, 0x1c, 0x3d, 0x2c, 0xab, 0x96, 0xcd, 0x4f, 0x87, 0x46, 0x6f, 0xc4, 0x4f, 0x51, 0x87, 0x9f,
	0x0e, 0x8d, 0x9e, 0xcb, 0x4f, 0x6f, 0xc1, 0x9c, 0x4c, 0xda, 0x9a, 0x4c, 0xe4, 0x91, 0x50, 0x8c,
	0xf1, 0x54, 0x90, 0x29, 0x9b, 0xb4, 0xd6, 0xe3, 0x1c, 0x93, 0x77, 0x11, 0x5e, 0x03, 0x21, 0x80,
	0x20, 0x1e, 0x4b, 0x86, 0x4a, 0x2b, 0x57, 0xc6, 0x3e, 0x6b, 0x78, 0xc1, 0xaf, 0xf1, 0x36, 0x9b,
	0x0d, 0x56, 0xa7, 0xf8, 0x85, 0xaa, 0x93, 0xb7, 0x40, 0x26, 0x1e, 0xb9, 0x40, 0x06, 0x6a, 0x5c,
	0xf2, 0x11, 0x6b, 0xdc, 0xab, 0x90, 0x92, 0x74, 0x5d, 0x34, 0xed, 0x68, 0xd2, 0x0a, 0x95, 0xde,
	0xf8, 0x46, 0xd0, 0x9a, 0x5d, 0x32, 0xac, 0xa8, 0x03, 0xd2, 0xd5, 0x74, 0x82, 0x13, 0x92, 0xae,
	0x37, 0x77, 0xc9, 0x10, 0xad, 0xc2, 0x13, 0x5d, 0xc9, 0xb4, 0x44, 0x49, 0xa4, 0xb1, 0x13, 0xed,
	0x13, 0x4f, 0x4b, 0x55, 0x16, 0x67, 0xed, 0x89, 0xe2, 0x56, 0x59, 0xb5, 0x6c, 0x5e, 0x40, 0x97,
	0x20, 0xd5, 0xd6, 0xd4, 0x43, 0xc5, 0xe8, 0x11, 0x59, 0x48, 0xaf, 0x70, 0xab, 0x49, 0x3c, 0x1e,
	0x98, 0x5a, 0xf1, 0xb2, 0x8f, 0x5e, 0xf1, 0x50, 0x0d, 0x52, 0x5d, 0xcd, 0x49, 0x59, 0x53, 0xc8,
	0xd1, 0xc0, 0xbc, 0x1c, 0xdc, 0xd0, 0x44, 0x5a, 0x17, 0xf6, 0x5c, 0x95, 0x8a, 0x6a, 0x19, 0x43,
	0x3c, 0x86, 0x40, 0x7b, 0x90, 0x1e, 0x10, 0xc3, 0x74, 0x39, 0x78, 0x8e, 0x9a, 0xf6, 0xd2, 0x43,
	0x0b, 0xda, 0x2d, 0x47, 0xd6, 0xc7, 0x02, 0x03, 0x77, 0xcc, 0xb4, 0xa9, 0x44, 0x25, 0xd6, 0xb1,
	0x66, 0x1c, 0x51, 0x34, 0x7e, 0x3a, 0x95, 0xd4, 0x1c, 0x11, 0x1f, 0x88, 0xea, 0x8e, 0x99, 0x8b,
	0xb7, 0x20, 0xe7, 0xb7, 0x17, 0xf1, 0x10, 0xb1, 0xe3, 0xc7, 0xd1, 0x03, 0x6c, 0x7f, 0xa2, 0x02,
	0xc4, 0x06, 0x52, 0xb7, 0x4f, 0x18, 0xdb, 0x08, 0xc1, 0x25, 0x5c, 0x00, 0xec, 0x88, 0x5d, 0x0b,
	0xbf, 0xc6, 0x5d, 0x8b, 0xfe, 0xee, 0xb3, 0x65, 0x2e, 0xff, 0xc7, 0x30, 0x3c, 0xe9, 0x71, 0x90,
	0x2b, 0x88, 0x04, 0x48, 0x98, 0xc4, 0xb0, 0xf7, 0xc8, 0xd6, 0x71, 0x7f, 0xd1, 0x16, 0x24, 0x5d,
	0x7f, 0x9d, 0xb7, 0x5c, 0x89, 0xf7, 0xa6, 0x33, 0x65, 0xa2, 0x91, 0x2e, 0xfa, 0x98, 0x03, 0x90,
	0x2c, 0xcb, 0x50, 0x0e, 0xfa, 0x16, 0xb1, 0x7b, 0x07, 0x3b, 0x78, 0x57, 0xcf, 0x08, 0x9e, 0x8b,
	0x5a, 0x28, 0x8e, 0xb4, 0xa8, 0x3f, 0x4a, 0xaf, 0x9c, 0x96, 0x36, 0x7e, 0xce, 0xad, 0xf3, 0x90,
	0xbf, 0x6c, 0xe4, 0x85, 0xcb, 0x1b, 0x4b, 0x3f, 0x78, 0x57, 0x5a, 0xfb, 0xf0, 0xe5, 0xb5, 0xef,
	0xbe, 0xb7, 0xfa, 0xe6, 0xb5, 0x77, 0xd7, 0xde, 0x7b, 0xd3, 0xfd, 0x7d, 0xf1, 0x87, 0x1b, 0xdf,
	0xfe, 0xd1, 0xe5, 0x2b, 0x31, 0x23, 0x22, 0x7c, 0xc9, 0x61, 0xcf, 0xea, 0x8b, 0x6f, 0xc0, 0x5c,
	0x00, 0x75, 0x8a, 0x97, 0xe7, 0xbd, 0x5e, 0x4e, 0x4d, 0xfa, 0xf2, 0xab, 0x30, 0x3c, 0xe5, 0xb1,
	0x77, 0x47, 0x53, 0xd4, 0x62, 0xbb, 0x4d, 0x74, 0xeb, 0xc2, 0x3c, 0xea, 0x3b, 0xa7, 0xe1, 0x0b,
	0x9c, 0xd3, 0x77, 0xe0, 0x29, 0x45, 0x75, 0xef, 0x4e, 0xb2, 0xe8, 0x16, 0x66, 0xd7, 0xbd, 0xcf,
	0x9d, 0xe1, 0x5e, 0xb7, 0xaa, 0xe3, 0x79, 0x0f, 0x82, 0x3b, 0x68, 0xa2, 0x17, 0x60, 0x4e, 0x27,
	0xaa, 0xac, 0xa8, 0x1d, 0x91, 0x99, 0x4a, 0x59, 0x3a, 0x89, 0x73, 0x6c, 0xb8, 0xe9, 0x8c, 0xfe,
	0x97, 0xa8, 0x8a, 0xb9, 0xf4, 0x57, 0x31, 0x5f, 0x7a, 0xba, 0xe6, 0x5c, 0xd8, 0xa1, 0x97, 0x03,
	0x85, 0x29, 0x7b, 0x5a, 0x82, 0x2b, 0x49, 0xe1, 0x01, 0xb7, 0xfa, 0xff, 0x5e, 0x9a, 0xe0, 0xcc,
	0xd2, 0xe4, 0x63, 0xdb, 0x78, 0x90, 0x6d, 0xaf, 0x43, 0xaa, 0xdd, 0x95, 0x4c, 0x53, 0x3c, 0x10,
	0xdb, 0xac, 0xf8, 0xbc, 0x34, 0x43, 0x06, 0x14, 0xca, 0xb6, 0x52, 0xa9, 0x8c, 0x13, 0x6d, 0xe7,
	0x03, 0x6d, 0x43, 0x52, 0x37, 0x14, 0xcd, 0x50, 0xac, 0x21, 0x0d, 0x68, 0x6e, 0x92, 0xc5, 0x5a,
	0x27, 0x4d, 0xd6, 0x5a, 0x37, 0x98, 0xa4, 0xa7, 0xc9, 0x1c, 0x69, 0x4f, 0x6b, 0x74, 0x53, 0xe7,
	0x37, 0xba, 0x8b, 0x9f, 0x72, 0x90, 0x60, 0x56, 0xa1, 0x0a, 0x24, 0x59, 0xa7, 0xe5, 0xdc, 0xd0,
	0xd2, 0x1b, 0x2f, 0x3e, 0xa4, 0x3b, 0x2b, 0xaa, 0x16, 0x51, 0x55, 0xc9, 0xcb, 0xac, 0x23, 0x55,
	0x54, 0x81, 0xac, 0x74, 0x60, 0x6a, 0xdd, 0xbe, 0x45, 0x44, 0x5a, 0x87, 0xce, 0xcf, 0xd4, 0x28,
	0xcd, 0xd2, 0x8c, 0xab, 0x66, 0x4f, 0xe4, 0x6f, 0xc3, 0xfc, 0x14, 0x17, 0x9a, 0xa8, 0x08, 0xa9,
	0xf1, 0xe9, 0xe3, 0x66, 0x3f, 0x7d, 0x63, 0xad, 0xfc, 0x6f, 0x39, 0x78, 0x66, 0x8a, 0xc8, 0x96,
	0xa4, 0xd8, 0xf7, 0x97, 0x1b, 0x90, 0x74, 0x45, 0x59, 0x4b, 0x38, 0x0b, 0xfe, 0x34, 0x4a, 0x76,
	0x61, 0xd0, 0x5b, 0x10, 0xa3, 0xef, 0x18, 0x8c, 0x72, 0x2e, 0x4d, 0xd4, 0x3d, 0x7b, 0x72, 0x93,
	0x58, 0x92, 0xd2, 0x0d, 0xb6, 0x2a, 0x8e, 0x22, 0x3b, 0xb5, 0x7f, 0xe0, 0x60, 0xd9, 0xb3, 0x76,
	0x75, 0x1a, 0x9f, 0x3c, 0xbe, 0x7f, 0xd0, 0xf3, 0x30, 0x47, 0x9b, 0x12, 0x4f, 0x4b, 0x42, 0x4f,
	0x37, 0xce, 0xd8, 0xc3, 0xa3, 0x8e, 0x64, 0x92, 0x2b, 0x22, 0x67, 0x71, 0x05, 0xdb, 0xc3, 0x6f,
	0x22, 0x90, 0x77, 0x17, 0xbd, 0xd1, 0x27, 0x7d, 0x52, 0xd7, 0x89, 0xd3, 0x8f, 0x78, 0xbd, 0x80,
	0x6e, 0x41, 0x52, 0x26, 0x03, 0x51, 0x92, 0x65, 0x83, 0x51, 0xd0, 0xeb, 0x7f, 0xbe, 0xb7, 0xfc,
	0x6a, 0x47, 0x2b, 0x58, 0x77, 0x88, 0x75, 0xc7, 0x3e, 0xa4, 0x05, 0x56, 0xcc, 0xd7, 0xfd, 0x4f,
	0x36, 0x83, 0xab, 0xeb, 0xfa, 0x51, 0x67, 0xdd, 0x1a, 0xea, 0xc4, 0x2c, 0x6c, 0x92, 0x41, 0x51,
	0x96, 0x0d, 0x9c, 0x90, 0x9d, 0x8f, 0x29, 0x46, 0x87, 0xcf, 0x24, 0xb8, 0xe7, 0x20, 0xd7, 0x53,
	0x54, 0xaf, 0x2b, 0x1c, 0x0e, 0x4b, 0xf7, 0x14, 0x75, 0xe4, 0x09, 0x02, 0xbc, 0xcb, 0xe1, 0x23,
	0xa3, 0xa3, 0x8f, 0x6f, 0xb4, 0x5b, 0x01, 0xd8, 0x3f, 0x7a, 0x03, 0x16, 0x02, 0xa5, 0xc2, 0xdd,
	0x43, 0x2c, 0xb0, 0x87, 0x27, 0xfd, 0xb5, 0xc3, 0xd9, 0xca, 0xc6, 0x58, 0x3d, 0xb0, 0xa5, 0x38,
	0xdd, 0x12, 0x62, 0xb3, 0xfb, 0xe3, 0x9d, 0xe5, 0x09, 0x2c, 0x78, 0x92, 0xa5, 0xe9, 0xb4, 0x2a,
	0x9b, 0x76, 0xff, 0xfd, 0xf0, 0x46, 0xe6, 0x25, 0x88, 0xd2, 0x7e, 0x3e, 0x7c, 0x36, 0x59, 0x53,
	0x21, 0x96, 0x14, 0x5f, 0x24, 0x21, 0xeb, 0x6b, 0x27, 0xd1, 0xf7, 0x27, 0x1e, 0x41, 0xb8, 0xd9,
	0x1f, 0x41, 0xa6, 0x1c, 0xc6, 0xe0, 0xb3, 0xc8, 0x04, 0x5b, 0x86, 0x67, 0x78, 0x16, 0x28, 0xfa,
	0x4b, 0x70, 0x66, 0x46, 0x62, 0xf3, 0xde, 0x14, 0x76, 0x20, 0xd7, 0xd7, 0xa7, 0x3c, 0x06, 0x7c,
	0xf3, 0xdc, 0xee, 0x7a, 0x3b, 0x84, 0xb3, 0x7d, 0xdf, 0xdd, 0x75, 0x1b, 0xd2, 0xef, 0x6b, 0x8a,
	0x2a, 0x4a, 0xb4, 0x19, 0x62, 0x0f, 0x3c, 0xcf, 0x9f, 0x01, 0x34, 0xee, 0x9c, 0xb6, 0x43, 0x18,
	0xde, 0x1f, 0xf7, 0x51, 0xdb, 0x90, 0x19, 0x3d, 0x52, 0xd8, 0x97, 0xeb, 0xd8, 0xcc, 0xbc, 0xb7,
	0x1d, 0xc2, 0x69, 0x57, 0xb5, 0xd8, 0x3e, 0x42, 0x3b, 0x90, 0x1d, 0x21, 0xa9, 0x36, 0x54, 0xfc,
	0x22, 0x50, 0x23, 0x2b, 0x6a, 0x52, 0x00, 0xcb, 0x24, 0xaa, 0xc5, 0x4a, 0xed, 0x45, 0xb1, 0x9a,
	0x44, 0xb5, 0x50, 0x0b, 0x46, 0xaf, 0x29, 0xe2, 0x21, 0x25, 0x7a, 0x56, 0x97, 0x5e, 0x9c, 0x01,
	0xcd, 0xa9, 0x0c, 0xdb, 0x21, 0x9c, 0x93, 0xfd, 0xb5, 0xa2, 0xe6, 0x41, 0xfd, 0xc0, 0x26, 0x33,
	0x99, 0xdd, 0xfe, 0x66, 0xb4, 0x71, 0x84, 0x47, 0x99, 0x50, 0x46, 0x1a, 0x2c, 0xfa, 0xf1, 0x44,
	0x4f, 0xcf, 0xc8, 0x9e, 0x30, 0xd7, 0xcf, 0x80, 0x9e, 0x56, 0x11, 0xb6, 0x43, 0x58, 0xf0, 0x2d,
	0xe3, 0x11, 0xb2, 0x37, 0xe0, 0x5e, 0x1c, 0x44, 0x53, 0xeb, 0x0e, 0xd8, 0xdd, 0xf2, 0xec, 0x0d,
	0xb8, 0x17, 0x06, 0x7b, 0x03, 0xae, 0x76, 0x93, 0x2a, 0xa3, 0x5d, 0xc8, 0x30, 0x1a, 0x10, 0x29,
	0x07, 0x38, 0x77, 0xd0, 0x6f, 0x9d, 0x01, 0xe6, 0xe1, 0x14, 0x3b, 0x97, 0x4c, 0x0f, 0xc5, 0x5c,
	0x82, 0x94, 0xa9, 0xf4, 0xfa, 0x5d, 0xba, 0xf9, 0x9c, 0xd3, 0x84, 0x8d, 0x06, 0x1c, 0xe6, 0x28,
	0xa5, 0x20, 0xdc, 0xd7, 0x9d, 0x07, 0xc0, 0x2f, 0xc2, 0x20, 0xb0, 0xa3, 0xc1, 0xda, 0xb9, 0x2d,
	0xcd, 0xe8, 0x49, 0x96, 0x45, 0x0c, 0x13, 0xed, 0x43, 0xa6, 0xaf, 0x8b, 0x87, 0xee, 0x00, 0x65,
	0x93, 0xdc, 0xe4, 0xf3, 0x51, 0x50, 0xd1, 0xd3, 0x6b, 0xa5, 0xfb, 0xfa, 0x68, 0x18, 0xbd, 0x09,
	0x0b, 0x5e, 0x38, 0x51, 0x97, 0x0c, 0xa9, 0x47, 0x6c, 0x60, 0x7a, 0x87, 0x29, 0xa5, 0x4e, 0x4b,
	0x71, 0x23, 0x2a, 0x7c, 0xf4, 0x79, 0x18, 0xcf, 0x7b, 0xf4, 0x1a, 0xae, 0x18, 0xba, 0x01, 0x34,
	0xf6, 0x1e, 0x8b, 0x22, 0x17, 0xb6, 0x88, 0x9e, 0x8e, 0xb1, 0x4d, 0x65, 0x10, 0xfc, 0x90, 0x1e,
	0xab, 0xa2, 0x41, 0xab, 0x16, 0x7c, 0xba, 0x23, 0xbb, 0xf2, 0xbf, 0xe7, 0x60, 0xde, 0x57, 0x9e,
	0xd9, 0xeb, 0x30, 0x6a, 0x3d, 0x16, 0x21, 0x27, 0x1f, 0x42, 0xc4, 0xfb, 0xde, 0x6e, 0x25, 0x3c,
	0x73, 0xb7, 0x52, 0x82, 0xd3, 0x52, 0xe2, 0x13, 0x2e, 0xca, 0x7f, 0xf6, 0xd3, 0xb8, 0xa7, 0x73,
	0xb9, 0x72, 0x97, 0x03, 0x3e, 0xe8, 0x30, 0x84, 0x20, 0xb7, 0x55, 0xc7, 0xfb, 0xc5, 0x56, 0xab,
	0x82, 0xc5, 0x5a, 0xbd, 0x56, 0xe1, 0x43, 0x48, 0x80, 0xf9, 0xf1, 0x18, 0xae, 0x34, 0xea, 0xcd,
	0x6a, 0xab, 0x8e, 0x6f, 0xf3, 0x1c, 0x5a, 0x84, 0x85, 0xf1, 0xcc, 0x75, 0xdc, 0x28, 0x8b, 0xcd,
	0x0a, 0xbe, 0x55, 0x2d, 0x57, 0xf8, 0xb0, 0x5f, 0x6b, 0xa7, 0x78, 0xab, 0xd8, 0x2c, 0xe3, 0x6a,
	0xa3, 0xc5, 0x47, 0xfc, 0x33, 0xe5, 0xe2, 0xed, 0x4a, 0xad, 0x56, 0xd9, 0x6b, 0x34, 0xf8, 0x68,
	0x69, 0xff, 0x4f, 0x7f, 0x5b, 0x0a, 0x7d, 0x74, 0x7f, 0x89, 0xfb, 0xf5, 0xfd, 0x25, 0xee, 0xef,
	0xf7, 0x97, 0x42, 0xff, 0xb8, 0xbf, 0xc4, 0xdd, 0xfd, 0x7a, 0x29, 0xf4, 0xf9, 0xd7, 0x4b, 0xdc,
	0xf7, 0xd6, 0x2f, 0xd0, 0x1b, 0x58, 0xaa, 0x7e, 0x70, 0x10, 0xa7, 0x55, 0xe6, 0xea, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x3a, 0x7d, 0x42, 0x2e, 0x1c, 0x00, 0x00,
}

func (x PayloadFormatter) String() string {
	s, ok := PayloadFormatter_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxAcknowledgment_Result) String() string {
	s, ok := TxAcknowledgment_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkMessage)
	if !ok {
		that2, ok := that.(UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	if len(this.CorrelationIds) != len(that1.CorrelationIds) {
		return false
	}
	for i := range this.CorrelationIds {
		if this.CorrelationIds[i] != that1.CorrelationIds[i] {
			return false
		}
	}
	if this.DeviceChannelIndex != that1.DeviceChannelIndex {
		return false
	}
	if this.ConsumedAirtime != nil && that1.ConsumedAirtime != nil {
		if *this.ConsumedAirtime != *that1.ConsumedAirtime {
			return false
		}
	} else if this.ConsumedAirtime != nil {
		return false
	} else if that1.ConsumedAirtime != nil {
		return false
	}
	return true
}
func (this *DownlinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage)
	if !ok {
		that2, ok := that.(DownlinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawPayload, that1.RawPayload) {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	if !this.EndDeviceIds.Equal(that1.EndDeviceIds) {
		return false
	}
	if that1.Settings == nil {
		if this.Settings != nil {
			return false
		}
	} else if this.Settings == nil {
		return false
	} else if !this.Settings.Equal(that1.Settings) {
		return false
	}
	if len(this.CorrelationIds) != len(that1.CorrelationIds) {
		return false
	}
	for i := range this.CorrelationIds {
		if this.CorrelationIds[i] != that1.CorrelationIds[i] {
			return false
		}
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	return true
}
func (this *DownlinkMessage_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage_Request)
	if !ok {
		that2, ok := that.(DownlinkMessage_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *DownlinkMessage_Scheduled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage_Scheduled)
	if !ok {
		that2, ok := that.(DownlinkMessage_Scheduled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Scheduled.Equal(that1.Scheduled) {
		return false
	}
	return true
}
func (this *TxAcknowledgment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxAcknowledgment)
	if !ok {
		that2, ok := that.(TxAcknowledgment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CorrelationIds) != len(that1.CorrelationIds) {
		return false
	}
	for i := range this.CorrelationIds {
		if this.CorrelationIds[i] != that1.CorrelationIds[i] {
			return false
		}
	}
	if this.Result != that1.Result {
		return false
	}
	if !this.DownlinkMessage.Equal(that1.DownlinkMessage) {
		return false
	}
	return true
}
func (this *GatewayTxAcknowledgment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayTxAcknowledgment)
	if !ok {
		that2, ok := that.(GatewayTxAcknowledgment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIds.Equal(that1.GatewayIds) {
		return false
	}
	if !this.TxAck.Equal(that1.TxAck) {
		return false
	}
	return true
}
func (this *GatewayUplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayUplinkMessage)
	if !ok {
		that2, ok := that.(GatewayUplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	if this.BandId != that1.BandId {
		return false
	}
	return true
}
func (this *ApplicationUplink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUplink)
	if !ok {
		that2, ok := that.(ApplicationUplink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FrmPayload, that1.FrmPayload) {
		return false
	}
	if !this.DecodedPayload.Equal(that1.DecodedPayload) {
		return false
	}
	if len(this.DecodedPayloadWarnings) != len(that1.DecodedPayloadWarnings) {
		return false
	}
	for i := range this.DecodedPayloadWarnings {
		if this.DecodedPayloadWarnings[i] != that1.DecodedPayloadWarnings[i] {
			return false
		}
	}
	if len(this.RxMetadata) != len(that1.RxMetadata) {
		return false
	}
	for i := range this.RxMetadata {
		if !this.RxMetadata[i].Equal(that1.RxMetadata[i]) {
			return false
		}
	}
	if !this.Settings.Equal(&that1.Settings) {
		return false
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	if this.LastAFCntDown != that1.LastAFCntDown {
		return false
	}
	if this.Confirmed != that1.Confirmed {
		return false
	}
	if this.ConsumedAirtime != nil && that1.ConsumedAirtime != nil {
		if *this.ConsumedAirtime != *that1.ConsumedAirtime {
			return false
		}
	} else if this.ConsumedAirtime != nil {
		return false
	} else if that1.ConsumedAirtime != nil {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	if !this.VersionIds.Equal(that1.VersionIds) {
		return false
	}
	if !this.NetworkIds.Equal(that1.NetworkIds) {
		return false
	}
	return true
}
func (this *ApplicationLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLocation)
	if !ok {
		that2, ok := that.(ApplicationLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationJoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationJoinAccept)
	if !ok {
		that2, ok := that.(ApplicationJoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	if len(this.InvalidatedDownlinks) != len(that1.InvalidatedDownlinks) {
		return false
	}
	for i := range this.InvalidatedDownlinks {
		if !this.InvalidatedDownlinks[i].Equal(that1.InvalidatedDownlinks[i]) {
			return false
		}
	}
	if this.PendingSession != that1.PendingSession {
		return false
	}
	if !this.ReceivedAt.Equal(that1.ReceivedAt) {
		return false
	}
	return true
}
func (this *ApplicationDownlink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlink)
	if !ok {
		that2, ok := that.(ApplicationDownlink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if !bytes.Equal(this.FrmPayload, that1.FrmPayload) {
		return false
	}
	if !this.DecodedPayload.Equal(that1.DecodedPayload) {
		return false
	}
	if len(this.DecodedPayloadWarnings) != len(that1.DecodedPayloadWarnings) {
		return false
	}
	for i := range this.DecodedPayloadWarnings {
		if this.DecodedPayloadWarnings[i] != that1.DecodedPayloadWarnings[i] {
			return false
		}
	}
	if this.Confirmed != that1.Confirmed {
		return false
	}
	if !this.ClassBC.Equal(that1.ClassBC) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.CorrelationIds) != len(that1.CorrelationIds) {
		return false
	}
	for i := range this.CorrelationIds {
		if this.CorrelationIds[i] != that1.CorrelationIds[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationDownlink_ClassBC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlink_ClassBC)
	if !ok {
		that2, ok := that.(ApplicationDownlink_ClassBC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	if that1.AbsoluteTime == nil {
		if this.AbsoluteTime != nil {
			return false
		}
	} else if !this.AbsoluteTime.Equal(*that1.AbsoluteTime) {
		return false
	}
	return true
}
func (this *ApplicationDownlinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlinks)
	if !ok {
		that2, ok := that.(ApplicationDownlinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationDownlinkFailed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationDownlinkFailed)
	if !ok {
		that2, ok := that.(ApplicationDownlinkFailed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationDownlink.Equal(&that1.ApplicationDownlink) {
		return false
	}
	if !this.Error.Equal(&that1.Error) {
		return false
	}
	return true
}
func (this *ApplicationInvalidatedDownlinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationInvalidatedDownlinks)
	if !ok {
		that2, ok := that.(ApplicationInvalidatedDownlinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	if this.LastFCntDown != that1.LastFCntDown {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	return true
}
func (this *DownlinkQueueOperationErrorDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkQueueOperationErrorDetails)
	if !ok {
		that2, ok := that.(DownlinkQueueOperationErrorDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return false
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	if this.MinFCntDown != that1.MinFCntDown {
		return false
	}
	if that1.PendingDevAddr == nil {
		if this.PendingDevAddr != nil {
			return false
		}
	} else if !this.PendingDevAddr.Equal(*that1.PendingDevAddr) {
		return false
	}
	if !bytes.Equal(this.PendingSessionKeyId, that1.PendingSessionKeyId) {
		return false
	}
	if this.PendingMinFCntDown != that1.PendingMinFCntDown {
		return false
	}
	return true
}
func (this *ApplicationServiceData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationServiceData)
	if !ok {
		that2, ok := that.(ApplicationServiceData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *ApplicationUp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp)
	if !ok {
		that2, ok := that.(ApplicationUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.CorrelationIds) != len(that1.CorrelationIds) {
		return false
	}
	for i := range this.CorrelationIds {
		if this.CorrelationIds[i] != that1.CorrelationIds[i] {
			return false
		}
	}
	if that1.ReceivedAt == nil {
		if this.ReceivedAt != nil {
			return false
		}
	} else if !this.ReceivedAt.Equal(*that1.ReceivedAt) {
		return false
	}
	if that1.Up == nil {
		if this.Up != nil {
			return false
		}
	} else if this.Up == nil {
		return false
	} else if !this.Up.Equal(that1.Up) {
		return false
	}
	if this.Simulated != that1.Simulated {
		return false
	}
	return true
}
func (this *ApplicationUp_UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_UplinkMessage)
	if !ok {
		that2, ok := that.(ApplicationUp_UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	return true
}
func (this *ApplicationUp_JoinAccept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_JoinAccept)
	if !ok {
		that2, ok := that.(ApplicationUp_JoinAccept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkAck)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkNack)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkSent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkSent)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkFailed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkFailed)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkFailed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkQueued) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueued)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueued)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	return true
}
func (this *ApplicationUp_DownlinkQueueInvalidated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_DownlinkQueueInvalidated)
	if !ok {
		that2, ok := that.(ApplicationUp_DownlinkQueueInvalidated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownlinkQueueInvalidated.Equal(that1.DownlinkQueueInvalidated) {
		return false
	}
	return true
}
func (this *ApplicationUp_LocationSolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_LocationSolved)
	if !ok {
		that2, ok := that.(ApplicationUp_LocationSolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	return true
}
func (this *ApplicationUp_ServiceData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationUp_ServiceData)
	if !ok {
		that2, ok := that.(ApplicationUp_ServiceData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceData.Equal(that1.ServiceData) {
		return false
	}
	return true
}
func (this *MessagePayloadFormatters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadFormatters)
	if !ok {
		that2, ok := that.(MessagePayloadFormatters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpFormatter != that1.UpFormatter {
		return false
	}
	if this.UpFormatterParameter != that1.UpFormatterParameter {
		return false
	}
	if this.DownFormatter != that1.DownFormatter {
		return false
	}
	if this.DownFormatterParameter != that1.DownFormatterParameter {
		return false
	}
	return true
}
func (this *DownlinkQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkQueueRequest)
	if !ok {
		that2, ok := that.(DownlinkQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndDeviceIdentifiers.Equal(&that1.EndDeviceIdentifiers) {
		return false
	}
	if len(this.Downlinks) != len(that1.Downlinks) {
		return false
	}
	for i := range this.Downlinks {
		if !this.Downlinks[i].Equal(that1.Downlinks[i]) {
			return false
		}
	}
	return true
}
func NewPopulatedApplicationUplink(r randyMessages, easy bool) *ApplicationUplink {
	this := &ApplicationUplink{}
	v1 := r.Intn(100)
	this.SessionKeyId = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.SessionKeyId[i] = byte(r.Intn(256))
	}
	this.FPort = uint32(r.Uint32())
	this.FCnt = uint32(r.Uint32())
	v2 := r.Intn(100)
	this.FrmPayload = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.FrmPayload[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.DecodedPayload = types.NewPopulatedStruct(r, easy)
	}
	v3 := r.Intn(10)
	this.DecodedPayloadWarnings = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.DecodedPayloadWarnings[i] = string(randStringMessages(r))
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.RxMetadata = make([]*RxMetadata, v4)
		for i := 0; i < v4; i++ {
			this.RxMetadata[i] = NewPopulatedRxMetadata(r, easy)
		}
	}
	v5 := NewPopulatedTxSettings(r, easy)
	this.Settings = *v5
	v6 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ReceivedAt = *v6
	if r.Intn(5) != 0 {
		this.AppSKey = NewPopulatedKeyEnvelope(r, easy)
	}
	this.LastAFCntDown = uint32(r.Uint32())
	this.Confirmed = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.ConsumedAirtime = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(10)
		this.Locations = make(map[string]*Location)
		for i := 0; i < v7; i++ {
			this.Locations[randStringMessages(r)] = NewPopulatedLocation(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.VersionIds = NewPopulatedEndDeviceVersionIdentifiers(r, easy)
	}
	if r.Intn(5) != 0 {
		this.NetworkIds = NewPopulatedNetworkIdentifiers(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationLocation(r randyMessages, easy bool) *ApplicationLocation {
	this := &ApplicationLocation{}
	this.Service = string(randStringMessages(r))
	v8 := NewPopulatedLocation(r, easy)
	this.Location = *v8
	if r.Intn(5) != 0 {
		v9 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v9; i++ {
			this.Attributes[randStringMessages(r)] = randStringMessages(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationJoinAccept(r randyMessages, easy bool) *ApplicationJoinAccept {
	this := &ApplicationJoinAccept{}
	v10 := r.Intn(100)
	this.SessionKeyId = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.SessionKeyId[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.AppSKey = NewPopulatedKeyEnvelope(r, easy)
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.InvalidatedDownlinks = make([]*ApplicationDownlink, v11)
		for i := 0; i < v11; i++ {
			this.InvalidatedDownlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	this.PendingSession = bool(bool(r.Intn(2) == 0))
	v12 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.ReceivedAt = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationDownlinkFailed(r randyMessages, easy bool) *ApplicationDownlinkFailed {
	this := &ApplicationDownlinkFailed{}
	v13 := NewPopulatedApplicationDownlink(r, easy)
	this.ApplicationDownlink = *v13
	v14 := NewPopulatedErrorDetails(r, easy)
	this.Error = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationInvalidatedDownlinks(r randyMessages, easy bool) *ApplicationInvalidatedDownlinks {
	this := &ApplicationInvalidatedDownlinks{}
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.Downlinks = make([]*ApplicationDownlink, v15)
		for i := 0; i < v15; i++ {
			this.Downlinks[i] = NewPopulatedApplicationDownlink(r, easy)
		}
	}
	this.LastFCntDown = uint32(r.Uint32())
	v16 := r.Intn(100)
	this.SessionKeyId = make([]byte, v16)
	for i := 0; i < v16; i++ {
		this.SessionKeyId[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationServiceData(r randyMessages, easy bool) *ApplicationServiceData {
	this := &ApplicationServiceData{}
	this.Service = string(randStringMessages(r))
	if r.Intn(5) != 0 {
		this.Data = types.NewPopulatedStruct(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp(r randyMessages, easy bool) *ApplicationUp {
	this := &ApplicationUp{}
	v17 := NewPopulatedEndDeviceIdentifiers(r, easy)
	this.EndDeviceIdentifiers = *v17
	v18 := r.Intn(10)
	this.CorrelationIds = make([]string, v18)
	for i := 0; i < v18; i++ {
		this.CorrelationIds[i] = string(randStringMessages(r))
	}
	if r.Intn(5) != 0 {
		this.ReceivedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	oneofNumber_Up := []int32{3, 4, 5, 6, 7, 8, 9, 10, 11, 13}[r.Intn(10)]
	switch oneofNumber_Up {
	case 3:
		this.Up = NewPopulatedApplicationUp_UplinkMessage(r, easy)
	case 4:
		this.Up = NewPopulatedApplicationUp_JoinAccept(r, easy)
	case 5:
		this.Up = NewPopulatedApplicationUp_DownlinkAck(r, easy)
	case 6:
		this.Up = NewPopulatedApplicationUp_DownlinkNack(r, easy)
	case 7:
		this.Up = NewPopulatedApplicationUp_DownlinkSent(r, easy)
	case 8:
		this.Up = NewPopulatedApplicationUp_DownlinkFailed(r, easy)
	case 9:
		this.Up = NewPopulatedApplicationUp_DownlinkQueued(r, easy)
	case 10:
		this.Up = NewPopulatedApplicationUp_DownlinkQueueInvalidated(r, easy)
	case 11:
		this.Up = NewPopulatedApplicationUp_LocationSolved(r, easy)
	case 13:
		this.Up = NewPopulatedApplicationUp_ServiceData(r, easy)
	}
	this.Simulated = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationUp_UplinkMessage(r randyMessages, easy bool) *ApplicationUp_UplinkMessage {
	this := &ApplicationUp_UplinkMessage{}
	this.UplinkMessage = NewPopulatedApplicationUplink(r, easy)
	return this
}
func NewPopulatedApplicationUp_JoinAccept(r randyMessages, easy bool) *ApplicationUp_JoinAccept {
	this := &ApplicationUp_JoinAccept{}
	this.JoinAccept = NewPopulatedApplicationJoinAccept(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkAck(r randyMessages, easy bool) *ApplicationUp_DownlinkAck {
	this := &ApplicationUp_DownlinkAck{}
	this.DownlinkAck = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkNack(r randyMessages, easy bool) *ApplicationUp_DownlinkNack {
	this := &ApplicationUp_DownlinkNack{}
	this.DownlinkNack = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkSent(r randyMessages, easy bool) *ApplicationUp_DownlinkSent {
	this := &ApplicationUp_DownlinkSent{}
	this.DownlinkSent = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkFailed(r randyMessages, easy bool) *ApplicationUp_DownlinkFailed {
	this := &ApplicationUp_DownlinkFailed{}
	this.DownlinkFailed = NewPopulatedApplicationDownlinkFailed(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkQueued(r randyMessages, easy bool) *ApplicationUp_DownlinkQueued {
	this := &ApplicationUp_DownlinkQueued{}
	this.DownlinkQueued = NewPopulatedApplicationDownlink(r, easy)
	return this
}
func NewPopulatedApplicationUp_DownlinkQueueInvalidated(r randyMessages, easy bool) *ApplicationUp_DownlinkQueueInvalidated {
	this := &ApplicationUp_DownlinkQueueInvalidated{}
	this.DownlinkQueueInvalidated = NewPopulatedApplicationInvalidatedDownlinks(r, easy)
	return this
}
func NewPopulatedApplicationUp_LocationSolved(r randyMessages, easy bool) *ApplicationUp_LocationSolved {
	this := &ApplicationUp_LocationSolved{}
	this.LocationSolved = NewPopulatedApplicationLocation(r, easy)
	return this
}
func NewPopulatedApplicationUp_ServiceData(r randyMessages, easy bool) *ApplicationUp_ServiceData {
	this := &ApplicationUp_ServiceData{}
	this.ServiceData = NewPopulatedApplicationServiceData(r, easy)
	return this
}

type randyMessages interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessages(r randyMessages) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessages(r randyMessages) string {
	v19 := r.Intn(100)
	tmps := make([]rune, v19)
	for i := 0; i < v19; i++ {
		tmps[i] = randUTF8RuneMessages(r)
	}
	return string(tmps)
}
func randUnrecognizedMessages(r randyMessages, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessages(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessages(dAtA []byte, r randyMessages, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		v20 := r.Int63()
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(v20))
	case 1:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessages(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRxMetadata := "[]*RxMetadata{"
	for _, f := range this.RxMetadata {
		repeatedStringForRxMetadata += strings.Replace(fmt.Sprintf("%v", f), "RxMetadata", "RxMetadata", 1) + ","
	}
	repeatedStringForRxMetadata += "}"
	s := strings.Join([]string{`&UplinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Message", "Message", 1) + `,`,
		`Settings:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Settings), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`RxMetadata:` + repeatedStringForRxMetadata + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`CorrelationIds:` + fmt.Sprintf("%v", this.CorrelationIds) + `,`,
		`DeviceChannelIndex:` + fmt.Sprintf("%v", this.DeviceChannelIndex) + `,`,
		`ConsumedAirtime:` + strings.Replace(fmt.Sprintf("%v", this.ConsumedAirtime), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage{`,
		`RawPayload:` + fmt.Sprintf("%v", this.RawPayload) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Message", "Message", 1) + `,`,
		`EndDeviceIds:` + strings.Replace(fmt.Sprintf("%v", this.EndDeviceIds), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1) + `,`,
		`Settings:` + fmt.Sprintf("%v", this.Settings) + `,`,
		`CorrelationIds:` + fmt.Sprintf("%v", this.CorrelationIds) + `,`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage_Request{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "TxRequest", "TxRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage_Scheduled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage_Scheduled{`,
		`Scheduled:` + strings.Replace(fmt.Sprintf("%v", this.Scheduled), "TxSettings", "TxSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxAcknowledgment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxAcknowledgment{`,
		`CorrelationIds:` + fmt.Sprintf("%v", this.CorrelationIds) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`DownlinkMessage:` + strings.Replace(this.DownlinkMessage.String(), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayTxAcknowledgment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayTxAcknowledgment{`,
		`GatewayIds:` + strings.Replace(fmt.Sprintf("%v", this.GatewayIds), "GatewayIdentifiers", "GatewayIdentifiers", 1) + `,`,
		`TxAck:` + strings.Replace(this.TxAck.String(), "TxAcknowledgment", "TxAcknowledgment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayUplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayUplinkMessage{`,
		`UplinkMessage:` + strings.Replace(this.UplinkMessage.String(), "UplinkMessage", "UplinkMessage", 1) + `,`,
		`BandId:` + fmt.Sprintf("%v", this.BandId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUplink) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRxMetadata := "[]*RxMetadata{"
	for _, f := range this.RxMetadata {
		repeatedStringForRxMetadata += strings.Replace(fmt.Sprintf("%v", f), "RxMetadata", "RxMetadata", 1) + ","
	}
	repeatedStringForRxMetadata += "}"
	keysForLocations := make([]string, 0, len(this.Locations))
	for k := range this.Locations {
		keysForLocations = append(keysForLocations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLocations)
	mapStringForLocations := "map[string]*Location{"
	for _, k := range keysForLocations {
		mapStringForLocations += fmt.Sprintf("%v: %v,", k, this.Locations[k])
	}
	mapStringForLocations += "}"
	s := strings.Join([]string{`&ApplicationUplink{`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FrmPayload:` + fmt.Sprintf("%v", this.FrmPayload) + `,`,
		`DecodedPayload:` + strings.Replace(fmt.Sprintf("%v", this.DecodedPayload), "Struct", "types.Struct", 1) + `,`,
		`DecodedPayloadWarnings:` + fmt.Sprintf("%v", this.DecodedPayloadWarnings) + `,`,
		`RxMetadata:` + repeatedStringForRxMetadata + `,`,
		`Settings:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Settings), "TxSettings", "TxSettings", 1), `&`, ``, 1) + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`AppSKey:` + strings.Replace(fmt.Sprintf("%v", this.AppSKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`LastAFCntDown:` + fmt.Sprintf("%v", this.LastAFCntDown) + `,`,
		`Confirmed:` + fmt.Sprintf("%v", this.Confirmed) + `,`,
		`ConsumedAirtime:` + strings.Replace(fmt.Sprintf("%v", this.ConsumedAirtime), "Duration", "types.Duration", 1) + `,`,
		`Locations:` + mapStringForLocations + `,`,
		`VersionIds:` + strings.Replace(fmt.Sprintf("%v", this.VersionIds), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`NetworkIds:` + strings.Replace(fmt.Sprintf("%v", this.NetworkIds), "NetworkIdentifiers", "NetworkIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationLocation) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ApplicationLocation{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Location:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationJoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInvalidatedDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.InvalidatedDownlinks {
		repeatedStringForInvalidatedDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForInvalidatedDownlinks += "}"
	s := strings.Join([]string{`&ApplicationJoinAccept{`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`AppSKey:` + strings.Replace(fmt.Sprintf("%v", this.AppSKey), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`InvalidatedDownlinks:` + repeatedStringForInvalidatedDownlinks + `,`,
		`PendingSession:` + fmt.Sprintf("%v", this.PendingSession) + `,`,
		`ReceivedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlink{`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FrmPayload:` + fmt.Sprintf("%v", this.FrmPayload) + `,`,
		`DecodedPayload:` + strings.Replace(fmt.Sprintf("%v", this.DecodedPayload), "Struct", "types.Struct", 1) + `,`,
		`DecodedPayloadWarnings:` + fmt.Sprintf("%v", this.DecodedPayloadWarnings) + `,`,
		`Confirmed:` + fmt.Sprintf("%v", this.Confirmed) + `,`,
		`ClassBC:` + strings.Replace(fmt.Sprintf("%v", this.ClassBC), "ApplicationDownlink_ClassBC", "ApplicationDownlink_ClassBC", 1) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`CorrelationIds:` + fmt.Sprintf("%v", this.CorrelationIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlink_ClassBC) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGateways := "[]*GatewayAntennaIdentifiers{"
	for _, f := range this.Gateways {
		repeatedStringForGateways += strings.Replace(fmt.Sprintf("%v", f), "GatewayAntennaIdentifiers", "GatewayAntennaIdentifiers", 1) + ","
	}
	repeatedStringForGateways += "}"
	s := strings.Join([]string{`&ApplicationDownlink_ClassBC{`,
		`Gateways:` + repeatedStringForGateways + `,`,
		`AbsoluteTime:` + strings.Replace(fmt.Sprintf("%v", this.AbsoluteTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlinks) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&ApplicationDownlinks{`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationDownlinkFailed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationDownlinkFailed{`,
		`ApplicationDownlink:` + strings.Replace(strings.Replace(this.ApplicationDownlink.String(), "ApplicationDownlink", "ApplicationDownlink", 1), `&`, ``, 1) + `,`,
		`Error:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorDetails", "ErrorDetails", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationInvalidatedDownlinks) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&ApplicationInvalidatedDownlinks{`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`LastFCntDown:` + fmt.Sprintf("%v", this.LastFCntDown) + `,`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkQueueOperationErrorDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkQueueOperationErrorDetails{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`MinFCntDown:` + fmt.Sprintf("%v", this.MinFCntDown) + `,`,
		`PendingDevAddr:` + fmt.Sprintf("%v", this.PendingDevAddr) + `,`,
		`PendingSessionKeyId:` + fmt.Sprintf("%v", this.PendingSessionKeyId) + `,`,
		`PendingMinFCntDown:` + fmt.Sprintf("%v", this.PendingMinFCntDown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationServiceData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationServiceData{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDeviceIdentifiers), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`CorrelationIds:` + fmt.Sprintf("%v", this.CorrelationIds) + `,`,
		`ReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.ReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Up:` + fmt.Sprintf("%v", this.Up) + `,`,
		`Simulated:` + fmt.Sprintf("%v", this.Simulated) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_UplinkMessage{`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationUplink", "ApplicationUplink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_JoinAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_JoinAccept{`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationJoinAccept", "ApplicationJoinAccept", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkAck{`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkNack{`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkSent{`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkFailed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkFailed{`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationDownlinkFailed", "ApplicationDownlinkFailed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkQueued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkQueued{`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationDownlink", "ApplicationDownlink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_DownlinkQueueInvalidated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_DownlinkQueueInvalidated{`,
		`DownlinkQueueInvalidated:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueueInvalidated), "ApplicationInvalidatedDownlinks", "ApplicationInvalidatedDownlinks", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_LocationSolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_LocationSolved{`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationLocation", "ApplicationLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationUp_ServiceData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationUp_ServiceData{`,
		`ServiceData:` + strings.Replace(fmt.Sprintf("%v", this.ServiceData), "ApplicationServiceData", "ApplicationServiceData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadFormatters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePayloadFormatters{`,
		`UpFormatter:` + fmt.Sprintf("%v", this.UpFormatter) + `,`,
		`UpFormatterParameter:` + fmt.Sprintf("%v", this.UpFormatterParameter) + `,`,
		`DownFormatter:` + fmt.Sprintf("%v", this.DownFormatter) + `,`,
		`DownFormatterParameter:` + fmt.Sprintf("%v", this.DownFormatterParameter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDownlinks := "[]*ApplicationDownlink{"
	for _, f := range this.Downlinks {
		repeatedStringForDownlinks += strings.Replace(f.String(), "ApplicationDownlink", "ApplicationDownlink", 1) + ","
	}
	repeatedStringForDownlinks += "}"
	s := strings.Join([]string{`&DownlinkQueueRequest{`,
		`EndDeviceIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDeviceIdentifiers), "EndDeviceIdentifiers", "EndDeviceIdentifiers", 1), `&`, ``, 1) + `,`,
		`Downlinks:` + repeatedStringForDownlinks + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
